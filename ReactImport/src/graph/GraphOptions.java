/*
 * GraphOptions.java
 *
 * Created on October 25, 2002, 4:46 PM
 */

package graph;
import react.mechanisms.flow.FlowGraph;
import react.mechanisms.flow.FlowAnalysisTabs;
import react.mechanisms.flow.FlowGraph;
import react.mechanisms.flow.FlowGraph;
import utilities.ErrorFrame;
import java.io.*;
import javax.swing.*;
import javax.swing.filechooser.*;
import java.util.StringTokenizer;
/**
 *
 * @author  reaction
 */
public class GraphOptions extends javax.swing.JPanel {
    
    FlowGraph drawGraph = null;
    FlowAnalysisTabs tabs = null;
    int yInitial = 25;
    /** Creates new form GraphOptions */
    public GraphOptions(FlowAnalysisTabs t) {
        tabs = t;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        flowButtonGroup = new javax.swing.ButtonGroup();
        drawPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        chooseDirButton = new javax.swing.JButton();
        readDirButton = new javax.swing.JButton();
        directoryField = new javax.swing.JTextField();
        Draw = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        topNodeList = new javax.swing.JList();
        printPanel = new javax.swing.JPanel();
        printAnalysisButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        flowPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        carbonButton = new javax.swing.JRadioButton();
        hydrogenButton = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        flowCutoffSlider = new javax.swing.JSlider();
        xSliderPanel = new javax.swing.JPanel();
        xMaxSlider = new javax.swing.JSlider();
        xOffSetSlider = new javax.swing.JSlider();
        ySliderPanel = new javax.swing.JPanel();
        yMaxSlider = new javax.swing.JSlider();
        yOffSetSlider = new javax.swing.JSlider();

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.TitledBorder("Options"));
        setMinimumSize(new java.awt.Dimension(500, 400));
        setPreferredSize(new java.awt.Dimension(500, 400));
        drawPanel.setLayout(new java.awt.GridLayout(1, 2));

        jPanel1.setLayout(new java.awt.GridLayout(4, 1));

        chooseDirButton.setText("Choose");
        chooseDirButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chooseDirButtonMouseClicked(evt);
            }
        });

        jPanel1.add(chooseDirButton);

        readDirButton.setText("Read");
        readDirButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                readDirButtonMouseClicked(evt);
            }
        });

        jPanel1.add(readDirButton);

        directoryField.setText("carbon");
        directoryField.setToolTipText("Flow Directory Name");
        directoryField.setMinimumSize(new java.awt.Dimension(70, 20));
        jPanel1.add(directoryField);

        Draw.setText("(Re)Draw Tree");
        Draw.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DrawMouseClicked(evt);
            }
        });

        jPanel1.add(Draw);

        drawPanel.add(jPanel1);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(250, 150));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(250, 150));
        jScrollPane1.setViewportView(topNodeList);

        drawPanel.add(jScrollPane1);

        add(drawPanel, java.awt.BorderLayout.CENTER);

        printPanel.setLayout(new java.awt.GridLayout(1, 0));

        printAnalysisButton.setText("Print");
        printAnalysisButton.setToolTipText("Print Flow Analysis to File as Text");
        printAnalysisButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printAnalysisButtonMouseClicked(evt);
            }
        });

        printPanel.add(printAnalysisButton);

        add(printPanel, java.awt.BorderLayout.SOUTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        flowPanel.setLayout(new java.awt.GridLayout(2, 1));

        jPanel4.setLayout(new java.awt.GridLayout(1, 2));

        carbonButton.setSelected(true);
        carbonButton.setText("carbon");
        jPanel4.add(carbonButton);

        hydrogenButton.setText("hydrogen");
        jPanel4.add(hydrogenButton);

        flowPanel.add(jPanel4);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        flowCutoffSlider.setMajorTickSpacing(20);
        flowCutoffSlider.setMaximum(50);
        flowCutoffSlider.setMinorTickSpacing(5);
        flowCutoffSlider.setPaintTicks(true);
        flowCutoffSlider.setSnapToTicks(true);
        flowCutoffSlider.setToolTipText("Cuttoff Level of Flow");
        flowCutoffSlider.setValue(1);
        flowCutoffSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                flowCutoffSliderMouseReleased(evt);
            }
        });

        jPanel2.add(flowCutoffSlider);

        flowPanel.add(jPanel2);

        jPanel3.add(flowPanel, java.awt.BorderLayout.NORTH);

        xSliderPanel.setLayout(new java.awt.GridLayout(2, 1));

        xSliderPanel.setBorder(new javax.swing.border.TitledBorder("Horizontal"));
        xMaxSlider.setMajorTickSpacing(100);
        xMaxSlider.setMaximum(1000);
        xMaxSlider.setMinorTickSpacing(10);
        xMaxSlider.setPaintTicks(true);
        xMaxSlider.setSnapToTicks(true);
        xMaxSlider.setToolTipText("Horizontal Size");
        xMaxSlider.setValue(1000);
        xMaxSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                xMaxSliderMouseReleased(evt);
            }
        });

        xSliderPanel.add(xMaxSlider);

        xOffSetSlider.setMajorTickSpacing(100);
        xOffSetSlider.setMaximum(1000);
        xOffSetSlider.setMinorTickSpacing(5);
        xOffSetSlider.setPaintTicks(true);
        xOffSetSlider.setSnapToTicks(true);
        xOffSetSlider.setToolTipText("Horizontal Offset");
        xOffSetSlider.setValue(0);
        xOffSetSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                xOffSetSliderMouseReleased(evt);
            }
        });

        xSliderPanel.add(xOffSetSlider);

        jPanel3.add(xSliderPanel, java.awt.BorderLayout.CENTER);

        ySliderPanel.setLayout(new java.awt.GridLayout(2, 1));

        ySliderPanel.setBorder(new javax.swing.border.TitledBorder("Vertical"));
        yMaxSlider.setMajorTickSpacing(100);
        yMaxSlider.setMaximum(400);
        yMaxSlider.setMinimum(20);
        yMaxSlider.setMinorTickSpacing(20);
        yMaxSlider.setPaintTicks(true);
        yMaxSlider.setSnapToTicks(true);
        yMaxSlider.setToolTipText("Vertical Size");
        yMaxSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                yMaxSliderMouseReleased(evt);
            }
        });

        ySliderPanel.add(yMaxSlider);

        yOffSetSlider.setMajorTickSpacing(1000);
        yOffSetSlider.setMaximum(10000);
        yOffSetSlider.setMinorTickSpacing(100);
        yOffSetSlider.setPaintTicks(true);
        yOffSetSlider.setSnapToTicks(true);
        yOffSetSlider.setToolTipText("Vertical OffSet");
        yOffSetSlider.setValue(0);
        yOffSetSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                yOffSetSliderMouseReleased(evt);
            }
        });

        ySliderPanel.add(yOffSetSlider);

        jPanel3.add(ySliderPanel, java.awt.BorderLayout.SOUTH);

        add(jPanel3, java.awt.BorderLayout.NORTH);

    }//GEN-END:initComponents

    private void printAnalysisButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printAnalysisButtonMouseClicked
       drawGraph.setMinimumFlowValue(flowCutoffSlider.getValue());
       JFileChooser chooser = new JFileChooser(".");
       int approve = chooser.showOpenDialog(this);
       if(approve == chooser.APPROVE_OPTION) {
            File cfile = chooser.getSelectedFile();
            String topSpecies = (String) topNodeList.getSelectedValue();
            drawGraph.setDepth(11);
            String output = drawGraph.stringGraph(topSpecies);
            System.out.println("Printing Cutoff:  " + flowCutoffSlider.getValue());
            System.out.println("Top Species: " + topSpecies);
            System.out.println(output);
            
            try {
            FileWriter write = new FileWriter(cfile);
            write.write(output);
            write.close();
            } catch(IOException io) {
                System.out.println("Write Failed");
            }
       }

    }//GEN-LAST:event_printAnalysisButtonMouseClicked

    private void flowCutoffSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flowCutoffSliderMouseReleased
        drawGraph.setMinimumFlowValue(flowCutoffSlider.getValue());

    }//GEN-LAST:event_flowCutoffSliderMouseReleased

    private void DrawMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DrawMouseClicked
        String topSpecies = (String) topNodeList.getSelectedValue();
        drawGraph.clearGraph();
        readDirButtonMouseClicked(evt);
        draw();
    }//GEN-LAST:event_DrawMouseClicked

    private void readDirButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_readDirButtonMouseClicked
        try {
            String topSpecies = (String) topNodeList.getSelectedValue();
            System.out.println("TopNode: " + topSpecies);
            drawGraph = new FlowGraph();
            //drawGraph.clearGraph();
            System.out.println("1---------------------------------------------------------------");
            drawGraph.read(topSpecies, directoryField.getText());
            System.out.println("2---------------------------------------------------------------");
            tabs.addPane(topSpecies,drawGraph);
            System.out.println("3---------------------------------------------------------------");
            drawGraph.setDepth(8);
            System.out.println("4---------------------------------------------------------------");
            String output = drawGraph.stringGraph(topSpecies);
            System.out.println("5---------------------------------------------------------------");
            System.out.println("Top Species: " + topSpecies);
            System.out.println(output);
            System.out.println("6---------------------------------------------------------------");

        
        } catch(IOException io) {
            System.out.println("====================================================================================");
            System.out.println(io);
        }

    }//GEN-LAST:event_readDirButtonMouseClicked

    private void chooseDirButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooseDirButtonMouseClicked
       JFileChooser chooser = new JFileChooser(".");
       chooser.setFileSelectionMode(chooser.DIRECTORIES_ONLY);
       int approve = chooser.showOpenDialog(this);
       if(approve == chooser.APPROVE_OPTION) {
            File cfile = chooser.getSelectedFile();
            FileSystemView view = chooser.getFileSystemView();
            File[] files = view.getFiles(chooser.getSelectedFile(),false);
            System.out.println("Files in directory: \n");
            String str[] = new String[files.length];
            boolean success = true;
            StringBuffer errout = new StringBuffer();
            for(int i=0;i<files.length;i++) {
                StringTokenizer tok = new StringTokenizer(files[i].getName(),".");
                try {
                    String name = tok.nextToken();
                    String suffix = tok.nextToken();
                    if(suffix.equals("con")) {
                        System.out.println(name);
                        str[i] = name;
                    }
                    } catch(java.util.NoSuchElementException ex) {
                        success = false;
                        errout.append("Not a flow file: " + files[i].getName() + "\n");
                    }
            }
            if(!success) {
                ErrorFrame errf = new ErrorFrame(errout.toString());
                errf.setVisible(true);
                System.err.println(errout.toString());
            }
            topNodeList.setListData(str);
            directoryField.setText(cfile.getAbsolutePath());
       } else
           System.out.println("file selection cancelled");
    }//GEN-LAST:event_chooseDirButtonMouseClicked

    private void yOffSetSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yOffSetSliderMouseReleased
        drawGraph.yOffSet = yOffSetSlider.getValue();
        draw();
    }//GEN-LAST:event_yOffSetSliderMouseReleased

    private void yMaxSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yMaxSliderMouseReleased
        drawGraph.yIncrement = yMaxSlider.getValue();
        draw();
    }//GEN-LAST:event_yMaxSliderMouseReleased

    private void xOffSetSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_xOffSetSliderMouseReleased
        drawGraph.xOffSet = xOffSetSlider.getValue();
        draw();
    }//GEN-LAST:event_xOffSetSliderMouseReleased

    private void xMaxSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_xMaxSliderMouseReleased
        drawGraph.xTotalMax = xMaxSlider.getValue();
        draw();
    }//GEN-LAST:event_xMaxSliderMouseReleased
    
    private void draw() {
        String topNode = (String) topNodeList.getSelectedValue();
        System.out.println("topNode: '" + topNode + "'");
        int i = drawGraph.getNode(topNode);
        DrawGraphNode node = (DrawGraphNode) drawGraph.Nodes.elementAt(i);
        drawGraph.treeGraphPositions(node,drawGraph.xTotalMax,
                           yInitial,drawGraph.yIncrement);
        drawGraph.repaint();        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Draw;
    private javax.swing.JRadioButton carbonButton;
    private javax.swing.JButton chooseDirButton;
    private javax.swing.JTextField directoryField;
    private javax.swing.JPanel drawPanel;
    private javax.swing.ButtonGroup flowButtonGroup;
    private javax.swing.JSlider flowCutoffSlider;
    private javax.swing.JPanel flowPanel;
    private javax.swing.JRadioButton hydrogenButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton printAnalysisButton;
    private javax.swing.JPanel printPanel;
    private javax.swing.JButton readDirButton;
    private javax.swing.JList topNodeList;
    private javax.swing.JSlider xMaxSlider;
    private javax.swing.JSlider xOffSetSlider;
    private javax.swing.JPanel xSliderPanel;
    private javax.swing.JSlider yMaxSlider;
    private javax.swing.JSlider yOffSetSlider;
    private javax.swing.JPanel ySliderPanel;
    // End of variables declaration//GEN-END:variables
    
}
