/*
 * ComputeThermodynamics.java
 *
 * Created on November 9, 2004, 6:24 PM
 */

package react.therm;

import react.common.TopReactionMenu;

import utilities.ErrorFrame;
//import se.lth.forbrf.blurock.thermo.Cp;
import utilities.OutputFrame;
import utilities.FileToString;
import utilities.FileFrame;

import java.util.List;
import java.math.BigInteger;
import java.util.Vector;
import java.util.NoSuchElementException;
import java.io.IOException;
import javax.xml.bind.*;

import info.esblurock.data.generated.BensonAtomType;
import info.esblurock.data.generated.BensonAtomValuesType;
import info.esblurock.data.generated.BensonType;
import info.esblurock.data.generated.ThermoDataType;

import java.io.File;
import java.util.StringTokenizer;
import java.io.PrintWriter;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;

/**
 *
 * @author  reaction
 */
@SuppressWarnings("serial")
public class ComputeThermodynamics extends javax.swing.JPanel {
    protected TopReactionMenu Top;
    protected Vector setOfBensonTables = new Vector();
    protected String userRoot = ".";
            
  /** Creates new form ComputeThermodynamics */
    public ComputeThermodynamics(TopReactionMenu top) {
        Top = top;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        filePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        findMoleculeButton = new javax.swing.JButton();
        moleculeFileField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        readMoleculeButton = new javax.swing.JButton();
        nameCorrButton = new javax.swing.JButton();
        thermoValuesPanel = new javax.swing.JPanel();
        bensonManipulations = new javax.swing.JPanel();
        clearTableButton = new javax.swing.JButton();
        bensonTable = new javax.swing.JPanel();
        moleculepanes = new javax.swing.JTabbedPane();
        outputPanel = new javax.swing.JPanel();
        bensonTableButton = new javax.swing.JButton();
        nasaPolynomialButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        filePanel.setLayout(new java.awt.GridLayout(2, 1));

        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        findMoleculeButton.setText("File Root Name");
        findMoleculeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findMoleculeButtonMouseClicked(evt);
            }
        });

        jPanel1.add(findMoleculeButton);

        moleculeFileField.setText("C2HO");
        jPanel1.add(moleculeFileField);

        filePanel.add(jPanel1);

        jPanel2.setLayout(new java.awt.GridLayout(1, 2));

        readMoleculeButton.setText("Read SDF File");
        readMoleculeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                readMoleculeButtonMouseClicked(evt);
            }
        });

        jPanel2.add(readMoleculeButton);

        nameCorrButton.setText("Read Name Correspondences");
        nameCorrButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nameCorrButtonMouseClicked(evt);
            }
        });

        jPanel2.add(nameCorrButton);

        filePanel.add(jPanel2);

        add(filePanel, java.awt.BorderLayout.NORTH);

        thermoValuesPanel.setLayout(new java.awt.BorderLayout());

        thermoValuesPanel.setBorder(new javax.swing.border.TitledBorder("Benson Values"));
        bensonManipulations.setLayout(new java.awt.GridLayout());

        clearTableButton.setText("Clear Molecules");
        clearTableButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearTableButtonMouseClicked(evt);
            }
        });

        bensonManipulations.add(clearTableButton);

        thermoValuesPanel.add(bensonManipulations, java.awt.BorderLayout.NORTH);

        bensonTable.setLayout(new java.awt.BorderLayout());

        moleculepanes.setMinimumSize(new java.awt.Dimension(500, 300));
        moleculepanes.setPreferredSize(new java.awt.Dimension(500, 300));
        bensonTable.add(moleculepanes, java.awt.BorderLayout.CENTER);

        thermoValuesPanel.add(bensonTable, java.awt.BorderLayout.CENTER);

        add(thermoValuesPanel, java.awt.BorderLayout.CENTER);

        outputPanel.setLayout(new java.awt.GridLayout(1, 2));

        bensonTableButton.setText("Benson Table");
        bensonTableButton.setToolTipText("write out Benson Table");
        bensonTableButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bensonTableButtonMouseClicked(evt);
            }
        });

        outputPanel.add(bensonTableButton);

        nasaPolynomialButton.setText("NASA Polynomials");
        nasaPolynomialButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nasaPolynomialButtonMouseClicked(evt);
            }
        });

        outputPanel.add(nasaPolynomialButton);

        add(outputPanel, java.awt.BorderLayout.SOUTH);

    }
    // </editor-fold>//GEN-END:initComponents

    private void findMoleculeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findMoleculeButtonMouseClicked
        File moldir = new File(userRoot, "mol");
        File dir = new File(moldir, "molsdf");
        FileFrame ff = new FileFrame("Molecule File",dir.toString(),"sdf");
        if(ff.getFile()) {
            File chosenFile = ff.chosenFile;
            String rootname = chosenFile.getName();
            File parent = chosenFile.getParentFile();
            if(parent.getName().compareTo("molsdf") == 0) {
                File molparent = parent.getParentFile();
                if(molparent.getName().compareTo("mol") == 0) {
                    int index = rootname.indexOf(".sdf");
                    moleculeFileField.setText(rootname.substring(0,index));
                } else {
                    ErrorFrame fr = new ErrorFrame("File must be in mol/molsdf directory of user:" +
                            " found in:" + molparent.getName());
                    fr.setVisible(true);
                }
            } else {
                ErrorFrame fr = new ErrorFrame("File must be in mol/molsdf directory of user:" +
                            " found in:" + parent.getName());
                fr.setVisible(true);
            }
        }
    }//GEN-LAST:event_findMoleculeButtonMouseClicked

    private void clearTableButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearTableButtonMouseClicked
        moleculepanes.removeAll();
    }//GEN-LAST:event_clearTableButtonMouseClicked

    private void nameCorrButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nameCorrButtonMouseClicked
        FileToString fileread = new FileToString("Molecule Correspondences",userRoot,"mol"); 
        StringTokenizer tok = new StringTokenizer(fileread.outputString,"\n");
        //int countTokens = tok.countTokens();
        StringBuffer error = new StringBuffer();
        boolean errors = false;
        while(tok.hasMoreTokens()) {
               String line = tok.nextToken();
               StringTokenizer linetok = new StringTokenizer(line, " ");
               System.out.println(line);
               try {
                String iupacname = linetok.nextToken();
                String shortname = linetok.nextToken();
               
                BensonTablePanel panel = findMoleculePanel(iupacname);
                if(panel != null) {
                   panel.shortNameField.setText(shortname);
                } else {
                   error.append("Not Found: " + iupacname + "\n");
                   errors = true;
                }
               } catch(NoSuchElementException ex) {
                   error.append("Error in line: " + line  + "\n");
               }
           }
           if(errors) {
               ErrorFrame errf = new ErrorFrame(error.toString());
               errf.setVisible(true);
           }
    }//GEN-LAST:event_nameCorrButtonMouseClicked
    public BensonTablePanel findMoleculePanel(String name) {
        BensonTablePanel benson = null;
        int tabsize = setOfBensonTables.size();
        int i=0;
        boolean notdone = true;
        while(i<tabsize && notdone) {
            benson = (BensonTablePanel) setOfBensonTables.elementAt(i);
            if(benson.IUPACNameField.getText().equals(name)) {
                notdone = false;
            }
            i++;
        }
        return benson;
    }
    private void nasaPolynomialButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nasaPolynomialButtonMouseClicked
        writeASCIIBensonTable(true);
        writeASCIINasaPolynomials();
    }//GEN-LAST:event_nasaPolynomialButtonMouseClicked

    private void bensonTableButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bensonTableButtonMouseClicked
        writeASCIIBensonTable(true);
    }//GEN-LAST:event_bensonTableButtonMouseClicked
    protected String command() throws IOException {
          String command = 
                Top.Scripts.thermoFromMolecule.getValue() + " " + 
                moleculeFileField.getText();
          String commandOutput = Top.tLink.singleCommand(command);
          OutputFrame fr = new OutputFrame(commandOutput);
          fr.setVisible(true);
          Top.tLink.stop();        
          String filename = moleculeFileField.getText() + ".benson";
          return filename;
   }
    private void readMoleculeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_readMoleculeButtonMouseClicked

        StringBuffer errorout = new StringBuffer();
          try {
            String filename = command();
            JAXBContext jc = JAXBContext.newInstance( "se.lth.forbrf.blurock.thermo" );
            Unmarshaller u = jc.createUnmarshaller();
            ThermoDataType thermo = (ThermoDataType) u.unmarshal( new File( filename ) );
             List bensonlist = thermo.getBenson();
            int bensonsize = bensonlist.size();
            for(int i=0;i<bensonsize;i++) {
                    BensonType benson = (BensonType) bensonlist.get(i);
                    String moleculename = benson.getMoleculeName();
                    System.out.println("Molecule: " + moleculename);
                    BensonTablePanel panel = new BensonTablePanel(moleculename);
                 try {                
                    
                    setOfBensonTables.add(panel);
                    moleculepanes.addTab(moleculename,panel);

                    List atomlist = benson.getBensonAtom();
                    for(int atom=0;atom<atomlist.size();atom++) {
                        BensonAtomType bensonatom = (BensonAtomType) atomlist.get(atom);
                        if(bensonatom != null) {
                            BigInteger valence = bensonatom.getValence();
                            BensonAtomValuesType valuestype = bensonatom.getBensonAtomValues();
                            Double entropy = new Double(valuestype.getEntropy());
                            Double heat = new Double(valuestype.getHeatOfFormation());
                            List cplist = valuestype.getCp();
                            Double Cp[] = new Double[7];
                            for(int cpindex = 0;cpindex<cplist.size();cpindex++) {
                                Object obj = cplist.get(cpindex);
                                Float f = (Float) obj;
                                Cp[cpindex] = new Double(f.floatValue());
                            }
                            panel.addRow(valence,entropy,heat,Cp);
                        } else {
                            Double Cp[] = new Double[7];
                            for(int l=0;l<7;l++) Cp[l] = new Double(0.0);
                            panel.addRow(new BigInteger("0000000"),
                                    new Double(0.0),
                                    new Double(0.0),
                                    Cp);
                        }
                    }
                } catch(NullPointerException ex) {
                  errorout.append("Unknown Atoms: " + moleculename + "\n");
                  Double Cp[] = new Double[7];
                  for(int l=0;l<7;l++) Cp[l] = new Double(0.0);
                  panel.addRow(new BigInteger("0000000"),
                               new Double(0.0),
                               new Double(0.0),
                               Cp);
                }
            }
          } catch(JAXBException ex) {
              ErrorFrame error = new ErrorFrame(ex.toString());
              error.setVisible(true);
          } catch(IOException io) {
              ErrorFrame fr = new ErrorFrame(io.toString());
              fr.setVisible(true);
          }
          if(errorout.toString().length() > 2) {
               ErrorFrame fr = new ErrorFrame(errorout.toString());
               fr.setVisible(true);
          }
    }//GEN-LAST:event_readMoleculeButtonMouseClicked
    protected void writeASCIIBensonTable(boolean show) {
        String filename = new String(moleculeFileField.getText() + ".lst");
        writeASCIIBensonTable(filename,show);      
    }
    protected void writeASCIIBensonTable(String filename,boolean show) {
        int tabsize = setOfBensonTables.size();
        StringBuffer outbuf = new StringBuffer();
        outbuf.append("0 Benson Thermodynamic Values\n");
        outbuf.append("%%  Heat    Entropy  Cps(7)\n");
        outbuf.append("%% (kcals)   (cals)   cal/K\n");
        for(int i=0;i<tabsize;i++) {
            BensonTablePanel benson = (BensonTablePanel) setOfBensonTables.elementAt(i);
            benson.sumValues();
            benson.stringSingleBensonTable(outbuf);
        }
        OutputFrame fr = new OutputFrame(outbuf.toString());
        fr.setVisible(show);
          try {
            System.out.println("Write to file:" + filename);
            PrintWriter prt = new PrintWriter(new FileOutputStream(filename));
            prt.print(outbuf.toString());
            prt.close();
          } catch(FileNotFoundException io) {
              ErrorFrame error = new ErrorFrame("Could not write file: " + filename);
              error.setVisible(true);
          }
    }
    protected void writeASCIINasaPolynomials() {
          String command = 
                Top.Scripts.chemkinFromBenson.getValue() + " " + 
                moleculeFileField.getText();
          String commandOutput = Top.tLink.singleCommand(command);
          OutputFrame fr = new OutputFrame(commandOutput);
          fr.setVisible(true);
          Top.tLink.stop();        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bensonManipulations;
    private javax.swing.JPanel bensonTable;
    private javax.swing.JButton bensonTableButton;
    private javax.swing.JButton clearTableButton;
    private javax.swing.JPanel filePanel;
    private javax.swing.JButton findMoleculeButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    protected javax.swing.JTextField moleculeFileField;
    private javax.swing.JTabbedPane moleculepanes;
    private javax.swing.JButton nameCorrButton;
    private javax.swing.JButton nasaPolynomialButton;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JButton readMoleculeButton;
    private javax.swing.JPanel thermoValuesPanel;
    // End of variables declaration//GEN-END:variables
    
}
