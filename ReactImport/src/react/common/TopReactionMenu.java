/*
 * TopReactionMenu.java
 *
 * Created on January 20, 2001, 3:43 PM
 */

package react.common;
import utilities.FrameSet;
import java.awt.event.*;
import javax.swing.JRadioButton;
import link.*;
import blurock.core.*;
import blurock.common.*;
import blurock.coreobjects.RegisteredClasses;
import blurock.instattr.*;
import utilities.BaseFrame;
import blurock.utilities.SetUpClassAttrFile;

/**
 * This is the global class with all the REACT information.
 * It is derived from JFrame.
 * @author Edward S. Blurock
 * @version 2006
 */
public class TopReactionMenu extends javax.swing.JFrame {

    /**
     * A boolean which indicates whether a REACT job has been started.
     */
    public boolean startReaction = false;
    /**
     * The standard 'current' directory to look for information
     */
    public String baseInfoDirectory = ".";
    /**
     * The 'ReactionScripts' class with all the standard script names of the REACT system
     */
    public ReactionScripts Scripts;
    /**
     * The 'ReactionDefaults' class with standard default values
     */
    public ReactionDefaults Defaults = new ReactionDefaults();
    /**
     * The current set of registered data types. This includes user defined data classes.
     */
    public RegisteredClasses registeredClasses = new RegisteredClasses();
    /**
     * This is the standard Read and Write manager (RWManager) to be used by the system.
     */
    public RWManager readWriteManager;
    /**
     * Creates new form TopReactionMenu
     * @param loadProgress The current load progress bar (of the initial window)
     * @param reactdir The directory of the REACT system base (used to find, for example, REACT data and program scripts)
     */
    public TopReactionMenu(javax.swing.JProgressBar loadProgress, String reactdir) {
        Scripts = new ReactionScripts(reactdir);
        System.out.println("");
        Common = new CommonStructures(this);
        loadProgress.setValue(20);
        System.out.println("SystemCommands");
        SystemCommands = new SystemCommands();
        loadProgress.setValue(30);
        System.out.println("InstanceCommon");
        InstanceCommon = new InstanceCommon(this);
        loadProgress.setValue(40);
        System.out.println("RWManager");
        readWriteManager = new RWManager(registeredClasses);
        loadProgress.setValue(50);
        System.out.println("historyLevel");
        history = new historyLevel(this);
        System.out.println("ClassTree");
        classTree = new ClassTree(this);
        initComponents ();
        pack ();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        radioDefaults = new javax.swing.JRadioButton();
        radioScripts = new javax.swing.JRadioButton();
        radioCommon = new javax.swing.JRadioButton();
        radioSystem = new javax.swing.JRadioButton();

        getContentPane().setLayout(new java.awt.GridLayout(5, 1));

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        radioDefaults.setText("Default Values");
        radioDefaults.setLabel("Defaults");
        radioDefaults.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                showDefaults(evt);
            }
        });

        getContentPane().add(radioDefaults);

        radioScripts.setText("Scripts");
        radioScripts.setLabel("Common");
        radioScripts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                showScripts(evt);
            }
        });

        getContentPane().add(radioScripts);

        radioCommon.setText("Common");
        radioCommon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showCommon(evt);
            }
        });

        getContentPane().add(radioCommon);

        radioSystem.setText("System Information");
        radioSystem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showSystem(evt);
            }
        });

        getContentPane().add(radioSystem);

    }//GEN-END:initComponents
    /**
     * This starts an initial REACTION job. 
     * This starts with the 'Initial' command of jobs and uses the history class 
     * to determine the name and starting save number
     * If the startReaction flag is set to true, then the REACT system is already started, so nothing is done.
     */
    public void initializeSystemIfNeeded() {
        if(!startReaction) {
	    String command = 
	        SystemInfo.reactionExecutable.getValue() + " xxx Initial " + 
	        history.getHistoryName() + " " + 
                history.getHistoryLevel();
	    reactLink.start(command);
	    history.setHistoryLevel(0);
            startReaction = true;
        } else {
            //System.out.println("System not Initialized");
        }
    }
    /**
     * This starts a REACTION job according to the history panel.
     * If a job is already running, that job is stopped and a new one started.
     */
    public void startSystemProcess() {
        if(startReaction)
            stopSystemProcess();
	String command = 
	    SystemInfo.reactionExecutable.getValue() + " xxx " 
           + history.historyCommandKey(true) + " "
	   + history.getHistoryName() + " "
           + history.getHistoryLevel();
         reactLink.start(command);
        startReaction = true;
    }   
    /**
     * This stops the current REACTION job
     */
    public void stopSystemProcess() {
        if(startReaction) {
            startReaction = false;
            String CommandName = "END";
            String commandOutput = reactLink.execute(CommandName);
            history.incrementHistoryLevel();
        }
        reactLink.stop();
    }
    /**
     * This sends and 'END' to the REACTION job to finish it.
     */
    public void quitSystemProcess() {
        startReaction = false;
        reactLink.stop();
    }
    public String startReactionJob(String command) {
        return new String("");
    }
  private void showSystem(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showSystem
// Add your handling code here:
      JRadioButton but = (JRadioButton) evt.getSource();
      SystemInfo.setVisible(!but.isSelected());
  }//GEN-LAST:event_showSystem

  private void showCommon(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showCommon
// Add your handling code here:
      JRadioButton but = (JRadioButton) evt.getSource();
      Common.setVisible(!but.isSelected());
  }//GEN-LAST:event_showCommon

  private void showScripts(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showScripts
// Add your handling code here:
      System.out.println("Default Script Names");
      JRadioButton but = (JRadioButton) evt.getSource();
      Scripts.setVisible(!but.isSelected());
  }//GEN-LAST:event_showScripts

  private void showDefaults(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showDefaults
// Add your handling code here:
      JRadioButton but = (JRadioButton) evt.getSource();
      Defaults.setVisible(!but.isSelected());
  }//GEN-LAST:event_showDefaults

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit (0);
    }//GEN-LAST:event_exitForm

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton radioCommon;
    private javax.swing.JRadioButton radioDefaults;
    private javax.swing.JRadioButton radioScripts;
    private javax.swing.JRadioButton radioSystem;
    // End of variables declaration//GEN-END:variables

    /**
     * This is a link to the REACT system to start jobs (ReactLink)
     */
    public ReactLink tLink = new ReactLink();    
    /**
     * This is the link to start a REACTION job.
     */
    public ReactionLink reactLink = new ReactionLink("Reaction::");    

    /**
     * This is the class holding the basic chemical data for the REACT system (molecules, substructures,
     * reaction patterns, mechanisms, etc.)
     */
    public CommonStructures Common;
    
    /**
     * This is the ReactionSystem class holding all the essential data associated with running
     * REACTION. This includes data locations, scripts and data.
     */
    public ReactionSystem SystemInfo = new ReactionSystem();
    
    /**
     * This is the set of menu frames created by the JAVA system. Each of
     * these frames are accessed by its name.
     */
    public FrameSet frameSet = new FrameSet();
    
    /**
     * This is the history panel controlling the initialization and running of a REACTION job.
     */
    public historyLevel history;
    
    /**
     * This ReactionSetupScripts class has all the directory locations and data names
     * to set up the standard set of data for the REACT system.
     */
    public ReactionSetupScripts reactionSetup = new ReactionSetupScripts();
    
    /**
     * This is a collection of standard REACTION system commands
     */
    public SystemCommands SystemCommands;
    
    /**
     * This InstanceCommon class has the current list of instances and attributes.
     */
    public InstanceCommon InstanceCommon;
    
    /**
     * This SystemParameters class has the attribute names of some standard quantities. For example, the 
     * instance lists, test, total, train...
     */
    public StandardParameters SystemParameters = new StandardParameters();
    
    /**
     * The names of important algorithms for the system.
     */
    public SystemAlgorithms SystemAlgorithms = new SystemAlgorithms();
    
    /**
     * The set of registered classes as a class tree.
     */
    public ClassTree classTree;
    
    /**
     * This is the panel used for the REACTION system standard initialization of data.
     */
    public InitializeReaction InitializeReaction;
    
    /**
     * This is the initialization of the data associated with the reaction system.
     */
    public InitializeSystem InitializeSystem;
    
    /**
     * The select instance attributes frame. This is included here because it is a
     * fundamental set of data used for data analysis
     */
    public BaseFrame selectInstanceAttributes;
    
    /**
     * The select instance frame. This is included here because it is a
     * fundamental set of data used for data analysis
     */
    public BaseFrame instanceSets;

}
