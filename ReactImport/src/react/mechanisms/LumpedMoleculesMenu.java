/*
 * LumpedMoleculesMenu.java
 *
 * Created on March 11, 2002, 10:48 AM
 */

package react.mechanisms;
import react.common.TopReactionMenu;
import blurock.instattr.GetAttributeParameter;
import blurock.coreobjects.BaseDataKeyWords;
import utilities.ErrorFrame;
import blurock.utilities.SetUpClassAttrFile;
import blurock.core.RunAlgorithm;
import blurock.core.RunCommand;
/**
 *
 * @author  reaction
 * @version 
 */
public class LumpedMoleculesMenu extends javax.swing.JPanel {
    TopReactionMenu Top;
    /** Creates new form LumpedMoleculesMenu */
    public LumpedMoleculesMenu(TopReactionMenu top) {
        Top = top;
        initComponents ();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        updateParameterList = new javax.swing.JButton();
        parameterNameField = new javax.swing.JTextField();
        parameterList = new react.utilities.StandardListPanel();
        jPanel2 = new javax.swing.JPanel();
        asProductRadio = new javax.swing.JRadioButton();
        asReactantRadio = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        selectEquivButton = new javax.swing.JButton();
        equivalentParameterField = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        rootNameField = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        jPanel1.setLayout(new java.awt.GridLayout(1, 2));
        jPanel1.setBorder(new javax.swing.border.TitledBorder("Reaction Class List"));
        
        updateParameterList.setToolTipText("Update the List");
          updateParameterList.setText("Update");
          updateParameterList.addMouseListener(new java.awt.event.MouseAdapter() {
              public void mouseClicked(java.awt.event.MouseEvent evt) {
                  updateParameterListMouseClicked(evt);
              }
          }
          );
          jPanel1.add(updateParameterList);
          
          
        parameterNameField.setText("ReactionClassList");
          jPanel1.add(parameterNameField);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel1, gridBagConstraints1);
        
        
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(parameterList, gridBagConstraints1);
        
        
        jPanel2.setLayout(new java.awt.GridLayout(1, 2));
        jPanel2.setBorder(new javax.swing.border.TitledBorder("Molecule used in Reaction"));
        
        asProductRadio.setSelected(true);
          asProductRadio.setText("Product");
          jPanel2.add(asProductRadio);
          
          
        asReactantRadio.setSelected(true);
          asReactantRadio.setText("Reactant");
          jPanel2.add(asReactantRadio);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel2, gridBagConstraints1);
        
        
        jPanel4.setLayout(new java.awt.GridLayout(1, 2));
        jPanel4.setBorder(new javax.swing.border.TitledBorder("Reference Isomer List (Equivalent Set)"));
        
        selectEquivButton.setText("Select");
          jPanel4.add(selectEquivButton);
          
          
        equivalentParameterField.setText("IsomerEquivalentSet");
          jPanel4.add(equivalentParameterField);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel4, gridBagConstraints1);
        
        
        jPanel6.setLayout(new java.awt.GridLayout(1, 2));
        
        rootNameField.setText("Test-Combined");
          jPanel6.add(rootNameField);
          
          
        startButton.setToolTipText("Find the Equivalent Lumped Molecules");
          startButton.setText("Start");
          startButton.addMouseListener(new java.awt.event.MouseAdapter() {
              public void mouseClicked(java.awt.event.MouseEvent evt) {
                  startButtonMouseClicked(evt);
              }
          }
          );
          jPanel6.add(startButton);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel6, gridBagConstraints1);
        
    }//GEN-END:initComponents

  private void startButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startButtonMouseClicked
    SetUpClassAttrFile inpfile = new SetUpClassAttrFile(Top,"LumpedEquivalentSets",
                "Determine Lumped Species from Reaction Classes");
    // MolRxnClassesParameterNames
    String[] molrxnpars = new String[3];
    molrxnpars[2] = "AsProduct";
    molrxnpars[1] = "AsReactant";
    molrxnpars[0] = rootNameField.getText();
    inpfile.printKeyWords("MolRxnClassesParameterNames",molrxnpars);
    // ParameterList
    String[] par = paramsForKeyWords();
    inpfile.printKeyWords("ParameterList",par);
    // RootName
    inpfile.printString("RootName",rootNameField.getText());
    // PredicateObject
    inpfile.printObjectAsString("PredicateObject",
                                "MemberOfKeyWord: Parameter Parameter",
                                "MemberOfKeyWord");
    // Mechanism
    inpfile.printString("Mechanism",rootNameField.getText());
    // ReactionClassList
    inpfile.printKeyWords("ReactionClassList",parameterList.selectedItemsToString(true));
    // KeyWordList
    inpfile.printKeyWords("KeyWordList",parameterList.selectedItemsToString(true));
    // EquivalentSets
    String[] inppars = new String[2];
    inppars[0] = equivalentParameterField.getText();
    inppars[1] = "LumpedMoleculesEquivalentSet";
    inpfile.printKeyWords("EquivalentSets",inppars);
    
    
    inpfile.read(false);
    
    RunAlgorithm runit1 = new RunAlgorithm(Top,"FindMolRxnClassesAlg",false);
    runit1.run();
    //runit1.showResults();
    RunAlgorithm runit2 = new RunAlgorithm(Top,"PredicatesFromKeyWordsAlg",false);
    runit2.run();
    //runit2.showResults();
    RunAlgorithm runit3 = new RunAlgorithm(Top,"DescriptionMatrixAlg",false);
    runit3.run();
    //runit3.showResults();
    RunAlgorithm runit4 = new RunAlgorithm(Top,"SimpleGroupAlg",false);
    runit4.run();
    runit4.showResults();
    //TransferAttributes LumpedEquivalentSet EquivalentSets
    String transS = "TransferAttributes LumpedMoleculesEquivalentSet EquivalentSets";
    RunCommand runit0 = new RunCommand(Top,transS,false);    
    //RunAlgorithm SimpleCreateLumpedMolecules 0
    RunAlgorithm runit5 = new RunAlgorithm(Top,"SimpleCreateLumpedMolecules",false);
    runit5.run();
    runit5.showResults();
  }//GEN-LAST:event_startButtonMouseClicked
  private String[] paramsForKeyWords() {
          int numpar = 1;
    if(asProductRadio.isSelected() & asReactantRadio.isSelected())
        numpar = 2;
    if(!asProductRadio.isSelected() & !asReactantRadio.isSelected())
        numpar = 0;
    int count = 0;
    String[] par = new String[numpar];
    if(asProductRadio.isSelected()) {
        par[count] = "AsProduct ";
        count++;
    }
    if(asReactantRadio.isSelected()) {
        par[count] = "AsReactant ";
        count++;
    }
    return par;
  }
  private void updateParameterListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateParameterListMouseClicked
    GetAttributeParameter getparam = new GetAttributeParameter(Top);
    boolean success = getparam.getParameterAsString(parameterNameField.getText());
    if(success) {
        if(getparam.attributeType.equals("KeyWords")) {
            BaseDataKeyWords keys = new BaseDataKeyWords(getparam.outputString);
            parameterList.setData(keys.keyWordAsStringArray());
            parameterList.updateUI();
        } else {
            ErrorFrame err = new ErrorFrame("Expected 'KeyWord' type, but got '" + getparam.attributeType + "'");
            err.setVisible(true);
        }
    } else {
            ErrorFrame err = new ErrorFrame("Error in reading parameter '"+ parameterNameField.getText() + "'");
            err.setVisible(true);
    }

  }//GEN-LAST:event_updateParameterListMouseClicked


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel jPanel1;
  private javax.swing.JButton updateParameterList;
  private javax.swing.JTextField parameterNameField;
  private react.utilities.StandardListPanel parameterList;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JRadioButton asProductRadio;
  private javax.swing.JRadioButton asReactantRadio;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JButton selectEquivButton;
  private javax.swing.JTextField equivalentParameterField;
  private javax.swing.JPanel jPanel6;
  private javax.swing.JTextField rootNameField;
  private javax.swing.JButton startButton;
  // End of variables declaration//GEN-END:variables

}
