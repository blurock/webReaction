/*
 * ReactionMechanismMenu.java
 *
 * Created on February 3, 2001, 11:09 PM
 */

package react.mechanisms;
import java.io.*;
import utilities.*;
import javax.swing.JButton;
import javax.swing.tree.*;
import javax.swing.JTree;
import react.common.*;
import java.awt.event.*;
import react.molecules.*;

/**
 *
 * @author  reaction
 * @version 
 */
public class ReactionMechanismMenu extends javax.swing.JPanel{

    ReactionMechanism mechanism;
    RxnMechNode topNode; 
    TopReactionMenu Top;
    
            public MouseListener ml = new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                int selRow = MechanismTree.getRowForLocation(e.getX(),e.getY());
                TreePath path = MechanismTree.getPathForLocation(e.getX(),e.getY());
                if(path != null) {
                    RxnMechNode node = (RxnMechNode) path.getLastPathComponent();
                    String name = (String) node.getUserObject();
                    System.out.println("Selected: " + name);
                    if(selRow != -1) {
                            if(e.getClickCount() == 2) {
                            node.showNode();
                        }
                   }
                }
            }
        };
        FileFrame ff;
    /** Creates new form ReactionMechanismMenu */
    public ReactionMechanismMenu(TopReactionMenu top) {
        Top = top;
        topNode = new RxnMechNode(top,"Set of Mechanisms","Set of Mechanisms");
        initComponents ();
        MechanismTree.addMouseListener(ml);
        ff = new FileFrame();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        readButton = new javax.swing.JButton();
        writeButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MechanismTree = new JTree(topNode);

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        readButton.setText("Read");
        readButton.setToolTipText("Read in Mechanism");
        readButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                readButton(evt);
            }
        });

        jPanel1.add(readButton);

        writeButton.setText("Write");
        writeButton.setToolTipText("Write out Mechanism to File");
        writeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                writeButton(evt);
            }
        });

        jPanel1.add(writeButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel1, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 400));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 500));
        jScrollPane1.setViewportView(MechanismTree);

        jPanel2.add(jScrollPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel2, gridBagConstraints);

    }//GEN-END:initComponents

  private void readButton(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_readButton
// Add your handling code here:
      ff.setupButton("Read Mechanism",".","mech");
      ff.getFile();
      File chosenFile = ff.chosenFile;
      try {
        mechanism = new ReactionMechanism();
        mechanism.readFromFile(chosenFile);
        display();
      } catch(IOException io) {
            System.out.println("File not found");
      }
  }//GEN-LAST:event_readButton
  
  private void display() {
      System.out.println("Reaction Mechanism Menu: display");
      RxnMechNode tnode =  new RxnMechNode(Top,"Mechanism","Mechanism");
      topNode.add(tnode);
     for(int i=0;i<mechanism.rxnClasses.size();i++) {
         ReactMechanismRxnClass rxnclass = 
                    (ReactMechanismRxnClass) mechanism.rxnClasses.elementAt(i);
         RxnMechRxnPatNode clsnode = 
                    new RxnMechRxnPatNode(Top,rxnclass.className,"Reaction Pattern");
         tnode.add(clsnode);
         System.out.println("Node: " + rxnclass.className);
         for(int j=0;j<rxnclass.reactions.size();j++) {
             ReactMechanismRxn rxn = 
                    (ReactMechanismRxn) rxnclass.reactions.elementAt(j);
             String rname = rxn.writeAsLine();
             System.out.println("Reaction Class: " + rname);
             RxnMechNode rxnname =  new RxnMechNode(Top,rname,"Reaction");
             clsnode.add(rxnname);
             System.out.println("Node: " + rxnclass.className);
             RxnMechNode rxnnode =  new RxnMechNode(Top,"Reactants","Reactants");
             rxnname.add(rxnnode);
             for(int kr=0;kr<rxn.reactantMolecules.length;kr++) {
                 if(rxn.reactantMolecules[kr] != null) {
                     ReactMolecule mol = (ReactMolecule) mechanism.Molecules.get(rxn.reactantMolecules[kr]);
                RxnMechMolecule rn = 
                    new RxnMechMolecule(Top,mol,"Reactant: " + rxnclass.className);
                 rxnnode.add(rn);
                 }
             }
             RxnMechNode prdnode = new RxnMechNode(Top,"Products","Products"); 
             rxnname.add(prdnode);
             for(int kp=0;kp<rxn.productMolecules.length;kp++) {
                 if(rxn.productMolecules[kp] != null) {
                     ReactMolecule mol = (ReactMolecule) mechanism.Molecules.get(rxn.productMolecules[kp]);
                RxnMechMolecule pn = 
                    new RxnMechMolecule(Top,mol,"Product: " + rxnclass.className);
                 prdnode.add(pn);
                 }
             }
         }
     }
      DefaultTreeModel treemodel = new DefaultTreeModel(topNode);
      MechanismTree.setModel(treemodel);
      repaint();
      updateUI();
  }
  private void writeButton(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writeButton
// Add your handling code here:
      FileFrame ff = new FileFrame();
      ff.setupButton("Read Mechanism",".","mech");
      ff.getFile();
      File chosenFile = ff.chosenFile;
      try {
        FileWriter writer = new FileWriter(chosenFile);
        String mechwr = mechanism.write();
        writer.write(mechwr);
        writer.close();
      } catch(IOException io) {
            System.out.println("File not found");
      } 
  }//GEN-LAST:event_writeButton


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton readButton;
    private javax.swing.JButton writeButton;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTree MechanismTree;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

}
