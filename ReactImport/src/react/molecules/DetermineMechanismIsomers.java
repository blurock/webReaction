/*
 * DetermineMechanismIsomers.java
 *
 * Created on March 9, 2002, 9:14 PM
 */

package react.molecules;
import react.common.TopReactionMenu;
import blurock.instattr.SelectInstanceAttributes;
import javax.swing.JFrame;
import blurock.instattr.GetAttributeParameter;
import blurock.utilities.SetUpClassAttrFile;
import blurock.core.RunAlgorithm;
import utilities.ErrorFrame;
import java.io.*;
import blurock.core.RunCommand;
import blurock.instattr.InstanceSets;
import java.util.StringTokenizer;
import blurock.coreobjects.BaseDataKeyWords;

/**
 *
 * @author  reaction
 * @version 
 */
public class DetermineMechanismIsomers extends javax.swing.JPanel {
    TopReactionMenu Top;
    /** Creates new form DetermineMechanismIsomers */
    public DetermineMechanismIsomers(TopReactionMenu top) {
        Top = top;
        initComponents ();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        atomicNumberRadial = new javax.swing.JRadioButton();
        valenceRadial = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        rootNameLabel = new javax.swing.JLabel();
        distributionRootName = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        moleculeAttribute = new javax.swing.JButton();
        moleculeAttributeField = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        createIsomersButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder("Atom Property Distributions"));
        jPanel2.setLayout(new java.awt.GridLayout(1, 2));

        atomicNumberRadial.setToolTipText("Distributions of the atomic numbers in the atom are computed");
        atomicNumberRadial.setSelected(true);
        atomicNumberRadial.setText("Atomic Numbers");
        jPanel2.add(atomicNumberRadial);

        valenceRadial.setToolTipText("Distributions of valences are computed");
        valenceRadial.setText("Valences");
        jPanel2.add(valenceRadial);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jPanel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel1, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridLayout(1, 2));

        jPanel4.setBorder(new javax.swing.border.TitledBorder("Atom Distributions"));
        rootNameLabel.setText("RootName");
        rootNameLabel.setToolTipText("The root name of the distribution objects");
        jPanel4.add(rootNameLabel);

        distributionRootName.setToolTipText("'MoleculeList' is from Generated Mechanism");
        distributionRootName.setText("MoleculeAtoms");
        jPanel4.add(distributionRootName);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel4, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridLayout(1, 2));

        jPanel3.setBorder(new javax.swing.border.TitledBorder("Molecule List"));
        moleculeAttribute.setToolTipText("Select Attribute with Molecule List");
        moleculeAttribute.setLabel("Molecules");
        moleculeAttribute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moleculeAttributeMouseClicked(evt);
            }
        });

        jPanel3.add(moleculeAttribute);

        moleculeAttributeField.setText("MoleculeList");
        jPanel3.add(moleculeAttributeField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel3, gridBagConstraints);

        jPanel5.setBorder(new javax.swing.border.TitledBorder("Isomers From Equivalent Sets"));
        createIsomersButton.setToolTipText("Find Isomers using distribution of atom values");
        createIsomersButton.setText("Find Isomers");
        createIsomersButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createIsomersButtonMouseClicked(evt);
            }
        });

        jPanel5.add(createIsomersButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel5, gridBagConstraints);

    }//GEN-END:initComponents

  private void createIsomersButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createIsomersButtonMouseClicked
    SetUpClassAttrFile inpfile = new SetUpClassAttrFile(Top,"IsomerEquivalentSets",
                "Find Isomers from predicates from distributions");
    inpfile.addClassTypeAsString("DegreeOfEquivalenceNumeric","StandardDegreeOfEquivalenceNumeric",
                                 "Standard DegreeOfEquivalenceNumeric",
                                 "InstanceVector");
    inpfile.addClassTypeAsString("EquivalentSet","NumericStandardEquivalentSet",
                               "A standard numeric criteria equivalent set",
                               "StandardDegreeOfEquivalenceNumeric Real");
    inpfile.addClassTypeAsString("SetOfEquivalentSets","NumericSetOfEquivalentSets",
                               "A standard numeric set of equivalent sets",
                               "NumericStandardEquivalentSet");
    inpfile.addClassTypeAsString("ExactlyEqualPredicate","MoleculeExactlyEqualPredicateNumeric",
                                "Exactly Equal Numeric Quantity in Molecule",
                                "Continuous Integer");

    
    inpfile.printString("MoleculeNameList",Top.SystemParameters.totalInstanceList.getValue());
    inpfile.printString("RootName",distributionRootName.getText());

    GetAttributeParameter getparam = new GetAttributeParameter(Top);
    getparam.getParameterAsString("MoleculeList");
    BaseDataKeyWords keys = new BaseDataKeyWords(getparam.outputString);
    String[] instancelist = keys.keyWordAsStringArray();
    
    StringBuffer equivset = new StringBuffer();
    equivset.append("Top\n");
    equivset.append("EquivalentSet:\n");
    String lst = keys.asString();

    equivset.append(lst);
    equivset.append("%% Arbitrary Vector Equivalence\nEquivalence: Values: 1  1.0   Parameter END\n");
    equivset.append("%% Equivalence Criteria\nCutOffCriteria: 0.1\n");
    equivset.append("%% Only a single set\nEND\n");
    String[] equivs = new String[2];
    equivs[0] = "StartEquivalentSet";
    equivs[1] = "IsomerEquivalentSet";
    inpfile.printKeyWords("EquivalentSets",equivs);
    inpfile.printObjectAsString("StartEquivalentSet",equivset.toString(),"NumericSetOfEquivalentSets");
    inpfile.printReal("CutOffCriteria",0.1);
    inpfile.printObjectAsString("PredicateObject",
                                "ExactlyEqualPredicate:  MoleculeDistributionsO 1.0",
                                "MoleculeExactlyEqualPredicateNumeric");
    inpfile.read(false);
    String transS = "TransferAttributes " +
                   moleculeAttributeField.getText() + " " +
                   Top.SystemParameters.totalInstanceList.getValue();
    RunCommand runit0 = new RunCommand(Top,transS,false);
    RunAlgorithm runit1 = new RunAlgorithm(Top,"MoleculeAtomDistributions",false);
    runit1.run();
    runit1.showResults();
    RunAlgorithm runit2 = new RunAlgorithm(Top,"PredicatesDistributions",false);
    runit2.run();
    //runit2.showResults();
    RunAlgorithm runit3 = new RunAlgorithm(Top,"DescriptionMatrixAlg",false);
    runit3.run();
    //runit3.showResults();
    RunAlgorithm runit4 = new RunAlgorithm(Top,"SimpleGroupAlg",false);
    runit4.run();
    runit4.showResults();
  }//GEN-LAST:event_createIsomersButtonMouseClicked

  private void moleculeAttributeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moleculeAttributeMouseClicked
    Top.instanceSets.setVisible(true);
  }//GEN-LAST:event_moleculeAttributeMouseClicked

  private void readButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_readButtonMouseClicked
 
  }//GEN-LAST:event_readButtonMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton atomicNumberRadial;
    private javax.swing.JButton createIsomersButton;
    private javax.swing.JTextField distributionRootName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton moleculeAttribute;
    private javax.swing.JTextField moleculeAttributeField;
    private javax.swing.JLabel rootNameLabel;
    private javax.swing.JRadioButton valenceRadial;
    // End of variables declaration//GEN-END:variables

}
