/*
 * ReactPSR.java
 *
 * Created on March 14, 2006, 8:15 AM
 */

package ignition.psr;
import utilities.FileFrame;
import utilities.BaseFrame;
import ignition.XMatrix;

import java.io.*;
import javax.swing.filechooser.*;
import javax.swing.JFileChooser;
import java.awt.event.*;
import link.*;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.util.Arrays;
import java.util.List;
import java.util.Collections;
import java.util.Vector;
import java.text.DecimalFormat;

/**
 *
 * @author  reaction
 */
public class ReactPSR extends javax.swing.JPanel {
    private String defaultDirectory = ".";
    private File[] selectedFiles = null;
    private String[] fileNames = null;
    private String rootName = "";
    private String plotFileName = "";
    private String gnuFileName = "";
    private String epsFileName = "";
    private String expFile = "";
    private String pattern = "#####0.0000000000";
    
    public Vector<ReadPSRFile> psrvalues = new Vector<ReadPSRFile>();
    public XMatrix mat = null;
    /** Creates new form ReactPSR */
    public ReactPSR() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        setupPanel = new javax.swing.JPanel();
        intputPanel = new javax.swing.JPanel();
        inputButton = new javax.swing.JButton();
        directoryText = new javax.swing.JTextField();
        outputPanel = new javax.swing.JPanel();
        collectButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        outfileButton = new javax.swing.JButton();
        outFileField = new javax.swing.JTextField();
        mainTablePanel = new javax.swing.JPanel();
        tableScroll = new javax.swing.JScrollPane();
        fileTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        setupPanel.setLayout(new java.awt.BorderLayout());

        intputPanel.setLayout(new java.awt.GridLayout(1, 2));

        intputPanel.setBorder(new javax.swing.border.TitledBorder("Input"));
        inputButton.setText("Files");
        inputButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inputButtonMouseClicked(evt);
            }
        });

        intputPanel.add(inputButton);

        directoryText.setText(".");
        intputPanel.add(directoryText);

        setupPanel.add(intputPanel, java.awt.BorderLayout.NORTH);

        outputPanel.setLayout(new java.awt.GridLayout(2, 1));

        collectButton.setText("Collect");
        collectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                collectButtonMouseClicked(evt);
            }
        });

        outputPanel.add(collectButton);

        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        outfileButton.setText("Output File");
        jPanel1.add(outfileButton);

        outFileField.setText("PSRMatrix.dat");
        jPanel1.add(outFileField);

        outputPanel.add(jPanel1);

        setupPanel.add(outputPanel, java.awt.BorderLayout.SOUTH);

        add(setupPanel, java.awt.BorderLayout.NORTH);

        mainTablePanel.setLayout(new java.awt.BorderLayout());

        fileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Temperature", "Pressure", "Filename"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        fileTable.setToolTipText("The set of PSR file calculations");
        tableScroll.setViewportView(fileTable);

        mainTablePanel.add(tableScroll, java.awt.BorderLayout.CENTER);

        add(mainTablePanel, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents

    private void collectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_collectButtonMouseClicked
        String[] names = collectNames();
        formMatrix(names);
        File file = new File(outFileField.getText());
        try {
            PrintStream prt = new PrintStream(file);
            String prefix = new String("");
            mat.writeMatrix(prt,prefix);
        } catch(Exception ex) {
            System.out.println(ex);
        }
        
    }//GEN-LAST:event_collectButtonMouseClicked

    private void inputButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputButtonMouseClicked
        System.out.println("Read PSR Files");
        DefaultTableModel tmodel = (DefaultTableModel) fileTable.getModel();

        JFileChooser f = new JFileChooser(defaultDirectory);
	PSRFileFilter filter = new PSRFileFilter();
	f.addChoosableFileFilter(filter);
        f.setMultiSelectionEnabled(true);
	f.showOpenDialog(this);
        defaultDirectory = f.getCurrentDirectory().toString();
        System.out.println("Current Directory: " + f);
	selectedFiles  = f.getSelectedFiles();
        System.out.println("Number of files chosen:" + selectedFiles.length);
        if(selectedFiles.length > 0) {
             //Extract.setEnabled(true);
             File first = selectedFiles[0];
             String parent = first.getParent();
             //if(datDirField.getText().equals("."))
               // datDirField.setText(parent);
            //if(gnuDirField.getText().equals("."))
                //gnuDirField.setText(parent);
             
             int count = 0;
             for(int i=0; i< selectedFiles.length; i++) {
                 System.out.println(selectedFiles[i].getAbsolutePath());
                 try {
                     ReadPSRFile rd = new ReadPSRFile(selectedFiles[i]);
                   psrvalues.add(rd);
                   count++;
                } catch(NumberFormatException ex) {
                    System.out.println("Wrong!!! " + selectedFiles[i].getAbsolutePath());
                } catch(IOException ex) {
                    System.out.println(ex);
                }
            }
             Collections.sort(psrvalues,psrvalues.get(0));
             for(int i=0; i< count; i++) {
                   ReadPSRFile rdsorted = psrvalues.get(i);
                   Double temp = new Double(rdsorted.temperature);
                   Double pressure = new Double(rdsorted.pressure);
                   String name = new String(rdsorted.filename);
                   tmodel.addRow(new Object[] {temp,pressure,name});
             }
        }

    }//GEN-LAST:event_inputButtonMouseClicked
    public String[] collectNames() {
        Vector<String> names = new Vector<String>();
        for(int i=0;i<psrvalues.size();i++) {
            ReadPSRFile rd = psrvalues.elementAt(i);
            String[] nms = rd.getNames();
            for(int j=0;j<nms.length;j++) {
                if(!names.contains(nms[j])) {
                    System.out.println("Name added: " + nms[j]);
                    names.add(nms[j]);
                }
            }
        }
        Collections.sort(names);
        String[] n = new String[names.size()];
        for(int i=0;i<names.size();i++) {
            n[i] = names.elementAt(i);
        }
        return n;
    }
    public void formMatrix(String[] names) {
        String[] fulllist = new String[names.length+1];
        for(int i=0;i<names.length;i++) {
            fulllist[i+1] = names[i];
        }
        fulllist[0] = "T[Ä¸]";
        mat = new XMatrix(psrvalues.size(),names.length+1, fulllist);
        for(int i=0; i< psrvalues.size();i++) {
            ReadPSRFile psr = psrvalues.elementAt(i);
            Double[] values = psr.fillInValues(names);
            mat.MatrixValues[i][0] = psr.temperature;
            for(int j=0;j<names.length;j++) {
                mat.MatrixValues[i][j+1] = values[j].doubleValue();
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton collectButton;
    private javax.swing.JTextField directoryText;
    private javax.swing.JTable fileTable;
    private javax.swing.JButton inputButton;
    private javax.swing.JPanel intputPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel mainTablePanel;
    private javax.swing.JTextField outFileField;
    private javax.swing.JButton outfileButton;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JPanel setupPanel;
    private javax.swing.JScrollPane tableScroll;
    // End of variables declaration//GEN-END:variables
    
}
