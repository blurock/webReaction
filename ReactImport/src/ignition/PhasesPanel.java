/*
 * PhasesPanel.java
 *
 * Created on June 28, 2004, 3:39 PM
 */

package ignition;
import java.io.File;
import java.io.IOException;
import utilities.ErrorFrame;
import utilities.FileFrame;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import java.awt.Dimension;
import javax.swing.table.JTableHeader;
/**
 *
 * @author  reaction
 */
public class PhasesPanel extends javax.swing.JPanel {
    
    XandGNChooser filter = new XandGNChooser();
    File defaultDir = new File(".");
    FileFrame chooser = null;
    XMatrix XMatrixRuns[];
    SetOfMaximaInRange[] NecessarySpeciesInRuns;
    DisplayNecessarySpecies[] DisplaySpecies;
    
    double limit = 0.0001;

    /** Creates new form PhasesPanel */
    public PhasesPanel() {
         initComponents();
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;

        
        javax.swing.table.TableColumn column = fileTable.getColumnModel().getColumn(0);
        column.setPreferredWidth(300);
        column = fileTable.getColumnModel().getColumn(1);
        column.setPreferredWidth(300);
        column = fileTable.getColumnModel().getColumn(2);
        column.setPreferredWidth(50);

        JTableHeader header =   fileTable.getTableHeader();
        rawDataPanel.add(header,java.awt.BorderLayout.SOUTH);
      
        column = boundaryTable.getColumnModel().getColumn(0);
        column.setPreferredWidth(50);
        column = boundaryTable.getColumnModel().getColumn(1);
        column.setPreferredWidth(200);
        column = boundaryTable.getColumnModel().getColumn(2);
        column.setPreferredWidth(200);
        column = boundaryTable.getColumnModel().getColumn(3);
        column.setPreferredWidth(50);

        header =   boundaryTable.getTableHeader();
        jPanel2.add(header,java.awt.BorderLayout.SOUTH);
        
        column = phaseBoundaryTable.getColumnModel().getColumn(0);
        column.setPreferredWidth(200);
        column = phaseBoundaryTable.getColumnModel().getColumn(1);
        column.setPreferredWidth(50);
        column = phaseBoundaryTable.getColumnModel().getColumn(2);
        column.setPreferredWidth(100);
        column = phaseBoundaryTable.getColumnModel().getColumn(3);
        column.setPreferredWidth(100);

        header =   phaseBoundaryTable.getTableHeader();
        jPanel3.add(header,java.awt.BorderLayout.SOUTH);  
      
        column = boundaryNecessarySpeciesTable.getColumnModel().getColumn(0);
        column.setPreferredWidth(100);
        column = boundaryNecessarySpeciesTable.getColumnModel().getColumn(1);
        column.setPreferredWidth(100);
        column = boundaryNecessarySpeciesTable.getColumnModel().getColumn(2);
        column.setPreferredWidth(100);
        column = boundaryNecessarySpeciesTable.getColumnModel().getColumn(3);
        column.setPreferredWidth(100);

        header =   boundaryNecessarySpeciesTable.getTableHeader();
        jPanel4.add(header,java.awt.BorderLayout.SOUTH);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        rawDataPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        browseButton = new javax.swing.JButton();
        readMatrixButton = new javax.swing.JButton();
        fileTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        addRowButton = new javax.swing.JButton();
        boundaryTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        computePhaseBoundaries = new javax.swing.JButton();
        phaseBoundaryTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        computePhases = new javax.swing.JButton();
        boundaryNecessarySpeciesTable = new javax.swing.JTable();

        setLayout(new java.awt.GridBagLayout());

        rawDataPanel.setLayout(new java.awt.BorderLayout());

        rawDataPanel.setBorder(new javax.swing.border.TitledBorder("Read"));
        jPanel5.setLayout(new java.awt.GridLayout(2, 0));

        browseButton.setText("Browse");
        browseButton.setToolTipText("Browse for files");
        browseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                browseButtonMouseClicked(evt);
            }
        });

        jPanel5.add(browseButton);

        readMatrixButton.setText("Read");
        readMatrixButton.setToolTipText("Read in the file");
        readMatrixButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                readMatrixButtonMouseClicked(evt);
            }
        });

        jPanel5.add(readMatrixButton);

        rawDataPanel.add(jPanel5, java.awt.BorderLayout.NORTH);

        fileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Concentration", "Necessity", "Enabled"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        fileTable.setCellSelectionEnabled(true);
        fileTable.setDragEnabled(true);
        fileTable.setEditingColumn(1);
        fileTable.setEditingRow(1);
        fileTable.setFocusCycleRoot(true);
        fileTable.setRowSelectionAllowed(false);
        rawDataPanel.add(fileTable, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(rawDataPanel, gridBagConstraints);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder("Boundary Conditions"));
        addRowButton.setText("Add Boundary Condition");
        addRowButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addRowButton.setMinimumSize(new java.awt.Dimension(1000, 25));
        addRowButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addRowButtonMouseClicked(evt);
            }
        });

        jPanel2.add(addRowButton, java.awt.BorderLayout.NORTH);

        boundaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Region", "Parameter", "Boundary", "Comparison"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jPanel2.add(boundaryTable, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(new javax.swing.border.TitledBorder("Boundaries of Regions"));
        computePhaseBoundaries.setText("Compute Regions under Conditions");
        computePhaseBoundaries.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        computePhaseBoundaries.setMinimumSize(new java.awt.Dimension(1000, 25));
        computePhaseBoundaries.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                computePhaseBoundariesMouseClicked(evt);
            }
        });

        jPanel3.add(computePhaseBoundaries, java.awt.BorderLayout.NORTH);

        phaseBoundaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Conditions", "Region", "Lower Boundary", "Upper Boundary", "Condition"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jPanel3.add(phaseBoundaryTable, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel3, gridBagConstraints);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(new javax.swing.border.TitledBorder("Phases Reduced Species"));
        computePhases.setText("Compute Necessary Species");
        computePhases.setMinimumSize(new java.awt.Dimension(600, 25));
        computePhases.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                computePhasesMouseClicked(evt);
            }
        });

        jPanel4.add(computePhases, java.awt.BorderLayout.NORTH);

        boundaryNecessarySpeciesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Range", "Number of Points", "Number of Species", "Necessary Species"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jPanel4.add(boundaryNecessarySpeciesTable, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel4, gridBagConstraints);

    }//GEN-END:initComponents

    private void computePhasesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_computePhasesMouseClicked
       DefaultTableModel tmodel = (DefaultTableModel) phaseBoundaryTable.getModel();
       DefaultTableModel fmodel = (DefaultTableModel) fileTable.getModel();
       int numBoundaries = tmodel.getRowCount();
       NecessarySpeciesInRuns = new SetOfMaximaInRange[numBoundaries];
        for(int b=0;b<numBoundaries;b++) {
            Double lower = (Double) tmodel.getValueAt(b,2);
            Double upper = (Double) tmodel.getValueAt(b,3);
            String GNname = (String) tmodel.getValueAt(b,0);
            
            File Xfile = (File) fmodel.getValueAt(0,0);
            String dir = Xfile.getParent();
            File fileF = new File(dir,GNname);
            
            NecessarySpeciesInRuns[b] = computeNecessaryWithinBoundary(lower,upper,fileF);
        }
        computeNecessaryBoundaryTable();
    }//GEN-LAST:event_computePhasesMouseClicked

    private void computePhaseBoundariesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_computePhaseBoundariesMouseClicked
        DefaultTableModel phasemodel = (DefaultTableModel) phaseBoundaryTable.getModel();
        int rcount = phasemodel.getRowCount();
        System.out.println("phase boundaries  (before)" +phasemodel.getRowCount());
        for(int i=rcount-1;i >= 0 ;i--) {
            System.out.println("Remove row: " + i);
            phasemodel.removeRow(i);
        }
        System.out.println("phase boundaries  " +phasemodel.getRowCount());
        
        DefaultTableModel tmodel = (DefaultTableModel) fileTable.getModel();
        int numRuns = tmodel.getRowCount();
        for(int r=0;r<numRuns;r++) {
           System.out.println("Run: " + r);
           XMatrix XM = XMatrixRuns[r];
           Object obj = tmodel.getValueAt(r,0);
           System.out.println(obj);
           System.out.println(obj.getClass());
           String Xname = (String) tmodel.getValueAt(r,0).toString();
           String GNname = (String) tmodel.getValueAt(r,1).toString();
           System.out.println("Run: " + Xname);
           for(int p=1;p<5;p++) {
               SetOfConditions conditions = getSetOfConditions(p,XM);
            System.out.println("Num Cond: " + conditions.size());
              if(conditions.size() > 0) {
                    PointsSatisfyingCondition points = new PointsSatisfyingCondition();
                    boolean[] isSatisfied = points.Test(XM,conditions);
                    double reference[] = XM.BuildReference(0);
                    SetOfRanges ranges = new SetOfRanges();
                    ranges.PointRange(isSatisfied,reference);
                    System.out.println(r + ",  " + GNname + ",  " + p);
                    addRangeRows(r,GNname,p,ranges);
               }
           }
       }
 
    }//GEN-LAST:event_computePhaseBoundariesMouseClicked

    private void addRowButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addRowButtonMouseClicked
        DefaultTableModel tmodel = (DefaultTableModel) boundaryTable.getModel();
        tmodel.addRow(new Object[] {
                    new Integer(1),
                    new String("N-C7H16"),
                    new Double(0.0001),
                    new Boolean(true)});
        tmodel.addRow(new Object[] {
                    new Integer(2),
                    new String("N-C7H16"),
                    new Double(0.0001),
                    new Boolean(false)});
    }//GEN-LAST:event_addRowButtonMouseClicked

    private void browseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browseButtonMouseClicked
        if(chooser == null) {
            chooser = new FileFrame("Select Concentration File",".",filter);
        }
        boolean success = chooser.getFileBase();
        File Xname = chooser.chosenFile;
        System.out.println(Xname);
        DefaultTableModel tmodel = (DefaultTableModel) fileTable.getModel();
        int r1 = tmodel.getRowCount();
        String[] GNnames = getGNNames(Xname);

        for(int i=0;i<GNnames.length;i++) {
            System.out.println(GNnames[i]);
            tmodel.addRow(new Object[] {Xname,GNnames[i], new Boolean(true)});
        }
        int r2 = tmodel.getRowCount();
        System.out.println(r2);
        tmodel.fireTableRowsInserted(r1,r2);
    }//GEN-LAST:event_browseButtonMouseClicked

    private void readMatrixButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_readMatrixButtonMouseClicked
       try {
            DefaultTableModel tmodel = (DefaultTableModel) fileTable.getModel();
            int numRows = tmodel.getRowCount();
            
            XMatrixRuns = new XMatrix[numRows];
            for(int i=0;i< numRows; i++) {
                File Xname = (File) tmodel.getValueAt(i,0);
                System.out.println(Xname);
                XMatrixRuns[i] = new XMatrix(Xname);
            }
       } catch(IOException ex) {
           new ErrorFrame(ex.toString()).show();
       }
    }//GEN-LAST:event_readMatrixButtonMouseClicked
    
    String[] getGNNames(File XFile) {
        Vector namesV = new Vector();
        String Xname = XFile.getName();
           int l = Xname.length();
             String specs = Xname.substring(5,l-4);
            System.out.println(specs);
            File parent = XFile.getAbsoluteFile().getParentFile();
            String[] namelist = parent.list();
            for(int i=0; i< namelist.length; i++) {
                if(namelist[i].startsWith("GN") && 
                  namelist[i].endsWith(".txt")  &&
                  namelist[i].indexOf(specs) > 0) {
                      namesV.add(namelist[i]);
                }
            }
            String[] namesS = new String[namesV.size()];
            for(int i=0;i<namesV.size();i++) {
                namesS[i] = (String) namesV.elementAt(i);
            }
        return namesS;
    }
    SetOfConditions getSetOfConditions(int phase, XMatrix XM) {
       DefaultTableModel tmodel = (DefaultTableModel) boundaryTable.getModel();
       
       SetOfConditions conditions = new SetOfConditions();

       int numRows = tmodel.getRowCount();
       System.out.println(numRows);
       for(int i=0;i<numRows;i++) {
           Integer pnum = (Integer) tmodel.getValueAt(i,0);
           if(pnum.intValue() == phase) {
               String parameter = (String) tmodel.getValueAt(i,1);
               Double boundary  = (Double) tmodel.getValueAt(i,2);
               Boolean gt       = (Boolean) tmodel.getValueAt(i,3);
               
               int index = XM.getIndex(parameter);
               Condition cond = new Condition(index,boundary.doubleValue(),gt.booleanValue(),false);
               conditions.addCondition(cond);
           }
       }
       return conditions;
    }
    void addRangeRows(int num,String Xname,int phase,SetOfRanges ranges) {
        DefaultTableModel tmodel = (DefaultTableModel) phaseBoundaryTable.getModel();
        Integer countI = new Integer(num);
        Integer phaseI = new Integer(phase);
        for(int i=0;i<ranges.size();i++) {
           PointRange range = (PointRange) ranges.elementAt(i);
           Double lower = new Double(range.LowerBoundary);
           Double upper = new Double(range.UpperBoundary);
           Boolean condition = new Boolean(range.Condition);
           System.out.println(lower.doubleValue());
           tmodel.addRow(new Object[] {Xname,phaseI,lower,upper,condition});
        }
        int rowCount = phaseBoundaryTable.getRowCount();
        tmodel.fireTableRowsInserted(rowCount,rowCount);
    }
    SetOfMaximaInRange computeNecessaryWithinBoundary(Double lower,Double upper,File fileF) {
        SetOfMaximaInRange MaximaSet = null;
            try {
                XMatrix mat = new XMatrix(fileF);
                PointRange rng = new PointRange();
                rng.LowerBoundary = lower.doubleValue();
                rng.UpperBoundary = upper.doubleValue();
                rng.NumberOfPoints = 0;
           
                String rangeName = new String("t[msec]");
                MaximaSet = new SetOfMaximaInRange(mat,rangeName,rng);
           
                MaximaSet.maximaOut(System.out);
            } catch(IOException ex) {
            System.err.println(ex);
            }
            return MaximaSet;
    }
    void computeNecessaryBoundaryTable() {
       DefaultTableModel tmodel = (DefaultTableModel) boundaryNecessarySpeciesTable.getModel();
       DefaultTableModel pmodel = (DefaultTableModel) phaseBoundaryTable.getModel();
       int numBoundaries = NecessarySpeciesInRuns.length;
       DisplaySpecies = new DisplayNecessarySpecies[numBoundaries];
        int rcount = tmodel.getRowCount();
        for(int i=rcount-1;i >= 0 ;i--) {
            tmodel.removeRow(i);
        }       
       for(int i=0;i<numBoundaries;i++) {
           /*Integer range = new Integer(i);*/
           Integer range = (Integer) pmodel.getValueAt(i,1);
           SetOfMaximaInRange maxima = NecessarySpeciesInRuns[i];
           Integer numSpecies = new Integer(maxima.numberAboveLimit(limit));
           Integer numInRange = new Integer(maxima.numberInRange());
           Boolean showit = new Boolean(false);
           
           tmodel.addRow(new Object[] {range,numSpecies,numInRange,showit});
           Double lowerLimit = new Double(limit);
           DisplaySpecies[i] = new DisplayNecessarySpecies(limit,NecessarySpeciesInRuns[i],".",range.intValue());
           DisplaySpecies[i].hide();
       }
        int rowCount = phaseBoundaryTable.getRowCount();
        tmodel.fireTableRowsInserted(rowCount,rowCount);
        ListSelectionModel rowSM = boundaryNecessarySpeciesTable.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                System.out.println(e);
                if (e.getValueIsAdjusting()) return;

                ListSelectionModel lsm =
                    (ListSelectionModel)e.getSource();
                if (lsm.isSelectionEmpty()) {
                    
                } else {
                    int selectedRow = lsm.getMinSelectionIndex();
                    DefaultTableModel tmodel = (DefaultTableModel) boundaryNecessarySpeciesTable.getModel();
                    
                    Boolean ans = (Boolean) tmodel.getValueAt(selectedRow,3);
                    System.out.println(ans);
                    boolean setvalue = !ans.booleanValue();
                    tmodel.setValueAt(new Boolean(setvalue),selectedRow,3);
                    
                    if(setvalue) 
                        DisplaySpecies[selectedRow].show();
                    else
                        DisplaySpecies[selectedRow].hide();
                    }
             }});
        }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRowButton;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton computePhaseBoundaries;
    private javax.swing.JButton readMatrixButton;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel rawDataPanel;
    private javax.swing.JTable phaseBoundaryTable;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTable boundaryNecessarySpeciesTable;
    private javax.swing.JButton computePhases;
    public javax.swing.JButton browseButton;
    private javax.swing.JTable fileTable;
    private javax.swing.JTable boundaryTable;
    // End of variables declaration//GEN-END:variables
    
}
