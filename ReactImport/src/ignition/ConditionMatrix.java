/*
 * ConditionMatrix.java
 *
 * Created on July 29, 2004, 8:07 PM
 */

package ignition;
import java.io.File;
import java.io.IOException;
import utilities.ErrorFrame;
import utilities.FileFrame;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import java.awt.Dimension;
import javax.swing.table.JTableHeader;
import java.io.PrintStream;
import java.io.FileOutputStream;
import utilities.ErrorFrame;
import javax.swing.JFileChooser;

import utilities.*;
import blurock.utilities.*;
import react.common.TopReactionMenu;

/**
 *
 * @author  reaction
 */
public class ConditionMatrix extends javax.swing.JPanel {
    
    ConditionGNMatrix ConditionedMatrix[];
    ClusterRegionAlpgorithmParameters algParameters = null;
    
    /** Creates new form ConditionMatrix */
    public ConditionMatrix(ClusterRegionAlpgorithmParameters algP) {
    algParameters = algP;
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        initializeButton = new javax.swing.JButton();
        historyName = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        fileTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        ConditionButton = new javax.swing.JButton();
        WriteConditionedMatricies = new javax.swing.JButton();
        InstanceAddButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        setMinimumSize(new java.awt.Dimension(600, 300));
        setPreferredSize(new java.awt.Dimension(600, 300));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder("Select Matrix Sets"));
        jPanel2.setLayout(new java.awt.GridLayout(2, 1));

        jPanel4.setLayout(new java.awt.GridLayout(1, 2));

        initializeButton.setText("Initialize");
        initializeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                initializeButtonMouseClicked(evt);
            }
        });

        jPanel4.add(initializeButton);

        historyName.setText("cluster");
        jPanel4.add(historyName);

        jPanel2.add(jPanel4);

        browseButton.setText("Browse");
        browseButton.setToolTipText("Browse for files");
        browseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                browseButtonMouseClicked(evt);
            }
        });

        jPanel2.add(browseButton);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        fileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GN", "X", "3Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        fileTable.setDragEnabled(true);
        fileTable.setEditingColumn(1);
        fileTable.setEditingRow(1);
        fileTable.setFocusCycleRoot(true);
        fileTable.setRowSelectionAllowed(false);
        jPanel1.add(fileTable, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.GridLayout(3, 1));

        jPanel3.setBorder(new javax.swing.border.TitledBorder("Generate Conditioned Matricies"));
        ConditionButton.setText("Condition Selected  Matricies");
        ConditionButton.setToolTipText("Condition Selected GN Matrices");
        ConditionButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ConditionButtonMouseClicked(evt);
            }
        });

        jPanel3.add(ConditionButton);

        WriteConditionedMatricies.setText("Write Conditioned Matricies");
        WriteConditionedMatricies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                WriteConditionedMatriciesMouseClicked(evt);
            }
        });

        jPanel3.add(WriteConditionedMatricies);

        InstanceAddButton.setText("Add To Instances");
        InstanceAddButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InstanceAddButtonMouseClicked(evt);
            }
        });

        jPanel3.add(InstanceAddButton);

        add(jPanel3, java.awt.BorderLayout.SOUTH);

    }
    // </editor-fold>//GEN-END:initComponents

    private void initializeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_initializeButtonMouseClicked
       algParameters.initializeClusteringRun(historyName.getText());
    }//GEN-LAST:event_initializeButtonMouseClicked

    private void InstanceAddButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InstanceAddButtonMouseClicked
        String totalXOutput = new String();
        String totalGNOutput = new String();
        try {
            for(int i=0;i<algParameters.XfileList.length;i++) {
                File Xfile = (File) algParameters.XfileList[i];
                String fileName = Xfile.toString();
                String parameterName = deriveParameterName(2,Xfile);
                String output = makeSetOfInstancesFromMatrix(fileName,parameterName);
                totalXOutput = totalXOutput + output;
            }
        OutputFrame frameX = new OutputFrame(totalXOutput);
        frameX.show();
        
        for(int i=0;i<algParameters.GNfileList.length;i++) {
                File GNfile = (File) algParameters.GNfileList[i];
                String fileName = GNfile.toString();
                String parameterName = deriveParameterName(3,GNfile);
                String output = makeSetOfInstancesFromMatrix(fileName,parameterName);
                totalGNOutput = totalGNOutput + output;
            }
        OutputFrame frameGN = new OutputFrame(totalGNOutput);
        frameGN.show();

      } catch(Exception ex) {
          ex.printStackTrace(System.out);
        OutputFrame frameX = new OutputFrame(totalXOutput);
        frameX.show();
        OutputFrame frameGN = new OutputFrame(totalGNOutput);
        frameGN.show();
      }

    }//GEN-LAST:event_InstanceAddButtonMouseClicked
    private String deriveParameterName(int start, File file) {
        String name = file.getName();
        int last = name.indexOf(".txt");
        String sub = name.substring(start,last);
        System.out.println("Instance Prefix: " + sub);
        return sub;
    }
    private String makeSetOfInstancesFromMatrix(String fileName,String parameterName) {
        String output = new String();
        
        String commandName = algParameters.Top.SystemInfo.matrixData.getValue();
        
        String commandRead = new String(commandName + " " + fileName + " 0.000001 " + parameterName);
        System.out.println(commandRead);
        algParameters.run.run(commandRead);
        output = output + algParameters.run.outputString;
        
        String commandInst = new String("MakeInstanceFromMatrix MatrixObject");
        algParameters.run.run(commandInst);
        output = output + algParameters.run.outputString;
        return output;
    }
    private void WriteConditionedMatriciesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WriteConditionedMatriciesMouseClicked
        writeConditionMatricies();
    }//GEN-LAST:event_WriteConditionedMatriciesMouseClicked

    private void ConditionButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ConditionButtonMouseClicked
        try {
            readMatricies();
            conditionMatricies();
        } catch(IOException io) {
            new ErrorFrame(io.toString()).show();
        }
    }//GEN-LAST:event_ConditionButtonMouseClicked
    private void readMatricies () throws IOException {

        DefaultTableModel tmodel = (DefaultTableModel) fileTable.getModel();
        int numRows = countSelectedMatricies();
        int totalNumRows = tmodel.getRowCount();
        ConditionedMatrix = new ConditionGNMatrix[numRows];
        File Xname = null;
        String GNnameS = null;
        int i=0;
        StringBuffer errorBuffer = new StringBuffer("Error in reading one or more matricies\n");
        for(int itot=0;itot< totalNumRows; itot++) {
            Boolean selected = (Boolean) tmodel.getValueAt(itot,2);
            System.out.println("Selected? " + itot);
            if(selected.booleanValue())   {
                try {
                   Xname = (File) tmodel.getValueAt(itot,0);
                   System.out.println("Read: " + itot + ", " + i + "   " + Xname);
                   XMatrix X = new XMatrix(Xname);
                   GNnameS = (String) tmodel.getValueAt(itot,1);
                    File GNname = new File(Xname.getParent(),GNnameS);
                    System.out.println(GNname);
                    XMatrix GN = new XMatrix(GNname);
                    ConditionedMatrix[i] = new ConditionGNMatrix(X,GN);
                    i++;
                    } catch(IOException ex) {
                        System.out.println(ex);
                        errorBuffer.append(Xname.toString() + ", " + GNnameS + "\n");
                    }
            }
          }
        if(i != numRows) {
            throw new IOException(errorBuffer.toString());
        }
    }
    private void conditionMatricies() {
        DefaultTableModel tmodel = (DefaultTableModel) fileTable.getModel();
        int numRows = tmodel.getRowCount();
        int i = 0;
        for(int itot=0;itot< numRows; itot++) {
          Boolean selected = (Boolean) tmodel.getValueAt(itot,2);
          if(selected.booleanValue())   {   
            System.out.println("Condition: " + itot + ", " + i);
            ConditionedMatrix[i].conditionGNMatrix(0.000000000000001);
            i++;
          }
        }
    }
    private void writeConditionMatricies() {
      try {
        JFileChooser dirchooser = new JFileChooser(algParameters.outputDir);
        dirchooser.setFileHidingEnabled(true);
        dirchooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = dirchooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            algParameters.outputDir = dirchooser.getSelectedFile();
            } else {
                return;
            }
        DefaultTableModel tmodel = (DefaultTableModel) fileTable.getModel();
        Vector Xlist = new Vector();
        Vector GNlist = new Vector();
        
        int numRows = tmodel.getRowCount();
        int i = 0;
        for(int itot=0;itot< numRows; itot++) {
          Boolean selected = (Boolean) tmodel.getValueAt(itot,2);
          if(selected.booleanValue())   {   
            File Xname = (File) tmodel.getValueAt(itot,0);
            
            String CXname = "C" + Xname.getName();
            File CXfile = new File(algParameters.outputDir, CXname);
            FileOutputStream out = new FileOutputStream( CXfile);
            PrintStream io = new PrintStream(out);
            System.out.println(CXfile);
            ConditionedMatrix[i].writeXMatrix(io);
            if(Xlist.indexOf(CXfile) < 0) {
                Xlist.add(CXfile);
            }
            
            String GNname = (String) tmodel.getValueAt(itot,1);
            String CGNname = "C" + GNname;
            File CGNfile = new File(algParameters.outputDir, CGNname);
            out = new FileOutputStream( CGNfile);
            io = new PrintStream(out);
            ConditionedMatrix[i].writeGNMatrix(io);
            GNlist.add(CGNfile);
            i++;
          }
          algParameters.XfileList = Xlist.toArray();
          algParameters.GNfileList = GNlist.toArray();
        }
      } catch(java.io.FileNotFoundException ex) {
          ErrorFrame error = new ErrorFrame("Error in creating files: File not created: ");
          error.show();
      }
      
    }

    int countSelectedMatricies() {
        DefaultTableModel tmodel = (DefaultTableModel) fileTable.getModel();
        int numRows = tmodel.getRowCount();
        int count = 0;
        System.out.println("countSelectedMatricies(): " + numRows);
       for(int i=0;i< numRows; i++) {
           Boolean selected = (Boolean) tmodel.getValueAt(i,2);
           if(selected.booleanValue()) count++;
       }
        System.out.println("countSelectedMatricies(): Final  " + count);
        return count;
    }
    
 
    private void browseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browseButtonMouseClicked
        if(algParameters.chooser == null) {
            algParameters.chooser = new FileFrame("Select Concentration File",".",algParameters.filter);
        }
        boolean success = algParameters.chooser.getFileBase();
        File Xname = algParameters.chooser.chosenFile;
        System.out.println(Xname);
        DefaultTableModel tmodel = (DefaultTableModel) fileTable.getModel();
        int r1 = tmodel.getRowCount();
        String[] GNnames = getGNNames(Xname);
        

        for(int i=0;i<GNnames.length;i++) {
            System.out.println(GNnames[i]);
            Boolean enable;
            if(i==0) 
                enable = new Boolean(true);
            else
                enable = new Boolean(false);
            tmodel.addRow(new Object[] {Xname,GNnames[i], enable});
        }
        int r2 = tmodel.getRowCount();
        System.out.println(r2);
        tmodel.fireTableRowsInserted(r1,r2);
 
    }//GEN-LAST:event_browseButtonMouseClicked
   String[] getGNNames(File XFile) {
        Vector namesV = new Vector();
        String Xname = XFile.getName();
           int l = Xname.length();
             String specs = Xname.substring(5,l-4);
            System.out.println(specs);
            File parent = XFile.getAbsoluteFile().getParentFile();
            String[] namelist = parent.list();
            for(int i=0; i< namelist.length; i++) {
                if(namelist[i].startsWith("GN") && 
                  namelist[i].endsWith(".txt")  &&
                  namelist[i].indexOf(specs) > 0) {
                      namesV.add(namelist[i]);
                }
            }
            String[] namesS = new String[namesV.size()];
            for(int i=0;i<namesV.size();i++) {
                namesS[i] = (String) namesV.elementAt(i);
            }
        return namesS;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConditionButton;
    private javax.swing.JButton InstanceAddButton;
    private javax.swing.JButton WriteConditionedMatricies;
    public javax.swing.JButton browseButton;
    private javax.swing.JTable fileTable;
    private javax.swing.JTextField historyName;
    private javax.swing.JButton initializeButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
    
}
