/*
 * DisplayNecessarySpecies.java
 *
 * Created on July 18, 2004, 8:53 PM
 */

package ignition;
import javax.swing.table.DefaultTableModel;
import javax.swing.JFileChooser;
import utilities.FileFrame;
import utilities.ErrorFrame;
import java.io.File;
import java.io.PrintWriter;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.FileOutputStream;
/**
 *
 * @author  reaction
 */
public class DisplayNecessarySpecies extends javax.swing.JFrame {
    SetOfMaximaInRange Maxima = null;
    FileFrame  chooser = null;
    
    public String parentDir = null;
    public int submechanism = 0;
    
    /** Creates new form DisplayNecessarySpecies */
    public DisplayNecessarySpecies() {
        initComponents();
    }
    public DisplayNecessarySpecies(double limit, SetOfMaximaInRange maxima,
                                   String pdir, int submech) {
        parentDir = pdir;
        submechanism = submech;
        Maxima = maxima;
        initComponents();
        Double limitD = new Double(limit);
        limitTextField.setText(limitD.toString());
        computeRows();
       pack();
    }
    void computeRows() {
       DefaultTableModel tmodel = (DefaultTableModel) speciesTable.getModel();
       String limitS = limitTextField.getText();
       Double limitD = new Double(limitS);
       double limit = limitD.doubleValue();
       if(Maxima != null) {
            Object[] maxima = Maxima.Maxima.values().toArray();
            for(int i=0;i<maxima.length;i++) {
                MaximumInRange max = (MaximumInRange) maxima[i];
                String name = max.valueName;
                if(max.Maximum < limit) {
                    Double value = new Double(max.Maximum);
                tmodel.addRow(new Object[] {name,value, new Boolean(true)});
                }
            }
       } else {
           
       }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        limitLabel = new javax.swing.JLabel();
        limitTextField = new javax.swing.JTextField();
        redoButton = new javax.swing.JButton();
        writeButton = new javax.swing.JButton();
        speciesList = new javax.swing.JPanel();
        speciesTable = new javax.swing.JTable();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(2, 2));

        limitLabel.setText("Limit");
        jPanel1.add(limitLabel);

        limitTextField.setText("-3");
        jPanel1.add(limitTextField);

        redoButton.setText("Compute Redundant");
        redoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                redoButtonMouseClicked(evt);
            }
        });

        jPanel1.add(redoButton);

        writeButton.setText("Write");
        writeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                writeButtonMouseClicked(evt);
            }
        });

        jPanel1.add(writeButton);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        speciesList.setLayout(new java.awt.BorderLayout());

        speciesList.setBorder(new javax.swing.border.TitledBorder("Necessary Species"));
        speciesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        speciesList.add(speciesTable, java.awt.BorderLayout.CENTER);

        getContentPane().add(speciesList, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void writeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writeButtonMouseClicked
        Integer iI = new Integer(submechanism);
        String mech = new String("mech" + iI.toString());
        System.out.println("Write Redundant List: " + mech);
        File dir = new File(parentDir,mech);
        File rFile = null;
        try {
            if(!dir.isDirectory()) {
                dir.mkdir();
            }
            rFile = new File(dir,"RedundantSpeciesList.txt");
            System.out.println(rFile.toString());
            redundantSpeciesList(rFile);
        } catch(FileNotFoundException io) {
            ErrorFrame fr = new ErrorFrame("Cannot redundant species file: " + rFile.toString());
            fr.show();
        }
    }//GEN-LAST:event_writeButtonMouseClicked
    public void redundantSpeciesList(File rFile)  throws FileNotFoundException {
        PrintWriter  prt = new PrintWriter(new FileOutputStream(rFile));
        DefaultTableModel tmodel = (DefaultTableModel) speciesTable.getModel();
        int rcount = tmodel.getRowCount();
        for(int i=0;i<rcount;i++) {
             Boolean enabled = (Boolean) tmodel.getValueAt(i,2);
             System.out.println(tmodel.getValueAt(i,0));
             if(enabled.booleanValue()) {
                String name = (String) tmodel.getValueAt(i,0);
                prt.println(name);
             }
        }
        prt.println("END_OF_FILE");            
        prt.close();
    }
    private void redoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redoButtonMouseClicked
       DefaultTableModel tmodel = (DefaultTableModel) speciesTable.getModel();

       int rcount = tmodel.getRowCount();
        for(int i=rcount-1;i >= 0 ;i--) {
            tmodel.removeRow(i);
        }       
        computeRows();

    }//GEN-LAST:event_redoButtonMouseClicked
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new DisplayNecessarySpecies().show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel limitLabel;
    private javax.swing.JTextField limitTextField;
    private javax.swing.JButton redoButton;
    private javax.swing.JPanel speciesList;
    private javax.swing.JTable speciesTable;
    private javax.swing.JButton writeButton;
    // End of variables declaration//GEN-END:variables
    
}
