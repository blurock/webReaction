/*
 * MemberPanel.java
 *
 * Created on May 10, 2001, 11:44 AM
 */

package xml.structure;

import javax.swing.*;

/**
 *
 * @author  reaction
 * @version 
 */
public class MemberPanel extends javax.swing.JPanel {

    BaseDataMember memberObject;
    boolean enableUpdate = false;
    String[] classNames = {"int", 
                        "unsigned int",
                        "double",
                        "bool",
                        "String",
                        "Other"};
    /** Creates new form MemberPanel */
    public MemberPanel(BaseDataMember mem) {
        memberObject = mem;
        System.out.println("  MemberPanel(): Object.MemberName = '" + memberObject.MemberName + "'");
        initComponents ();        
        typeList.addItem("int");
        typeList.addItem("unsigned int");
        typeList.addItem("double");
        typeList.addItem("String");
        typeList.addItem("Other");
        
        qualifier.addItem("normal");
        qualifier.addItem("pointer");
        qualifier.addItem("dereferenced");
        setData();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        namePanel = new javax.swing.JPanel();
        memberName = new javax.swing.JTextField();
        classPanel = new javax.swing.JPanel();
        typeList = new javax.swing.JComboBox();
        otherType = new javax.swing.JTextField();
        Qualifiers = new javax.swing.JPanel();
        isPublic = new javax.swing.JCheckBox();
        qualifier = new javax.swing.JComboBox();
        isVisible = new javax.swing.JCheckBox();
        descriptionPanel = new javax.swing.JPanel();
        description = new javax.swing.JTextField();
        setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        namePanel.setLayout(new java.awt.GridLayout(1, 1));
        namePanel.setBorder(new javax.swing.border.TitledBorder("Member Name"));
        
        memberName.setToolTipText("The name of the member");
          memberName.setText("Member");
          memberName.addKeyListener(new java.awt.event.KeyAdapter() {
              public void keyPressed(java.awt.event.KeyEvent evt) {
                  memberNameKeyPressed(evt);
              }
          }
          );
          namePanel.add(memberName);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(namePanel, gridBagConstraints1);
        
        
        classPanel.setLayout(new java.awt.GridLayout(1, 2));
        classPanel.setBorder(new javax.swing.border.TitledBorder("Member Class"));
        
        typeList.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  typeListActionPerformed(evt);
              }
          }
          );
          typeList.addItemListener(new java.awt.event.ItemListener() {
              public void itemStateChanged(java.awt.event.ItemEvent evt) {
                  typeListItemStateChanged(evt);
              }
          }
          );
          typeList.addMouseListener(new java.awt.event.MouseAdapter() {
              public void mouseClicked(java.awt.event.MouseEvent evt) {
                  typeListMouseClicked(evt);
              }
          }
          );
          classPanel.add(typeList);
          
          
        otherType.addKeyListener(new java.awt.event.KeyAdapter() {
              public void keyPressed(java.awt.event.KeyEvent evt) {
                  otherTypeKeyPressed(evt);
              }
          }
          );
          classPanel.add(otherType);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(classPanel, gridBagConstraints1);
        
        
        Qualifiers.setLayout(new java.awt.GridLayout(2, 2));
        Qualifiers.setBorder(new javax.swing.border.TitledBorder("Qualifiers"));
        Qualifiers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                QualifiersMouseExited(evt);
            }
        }
        );
        
        isPublic.setToolTipText("If checked, the member is public");
          isPublic.setSelected(true);
          isPublic.setText("Public");
          isPublic.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  isPublicActionPerformed(evt);
              }
          }
          );
          isPublic.addChangeListener(new javax.swing.event.ChangeListener() {
              public void stateChanged(javax.swing.event.ChangeEvent evt) {
                  isPublicStateChanged(evt);
              }
          }
          );
          isPublic.addItemListener(new java.awt.event.ItemListener() {
              public void itemStateChanged(java.awt.event.ItemEvent evt) {
                  isPublicItemStateChanged(evt);
              }
          }
          );
          Qualifiers.add(isPublic);
          
          
        qualifier.addItemListener(new java.awt.event.ItemListener() {
              public void itemStateChanged(java.awt.event.ItemEvent evt) {
                  qualifierItemStateChanged(evt);
              }
          }
          );
          Qualifiers.add(qualifier);
          
          
        isVisible.setSelected(true);
          isVisible.setText("visible");
          Qualifiers.add(isVisible);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(Qualifiers, gridBagConstraints1);
        
        
        descriptionPanel.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints2;
        descriptionPanel.setBorder(new javax.swing.border.TitledBorder("Description"));
        
        description.setText("Description");
          gridBagConstraints2 = new java.awt.GridBagConstraints();
          gridBagConstraints2.gridwidth = 0;
          gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
          descriptionPanel.add(description, gridBagConstraints2);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(descriptionPanel, gridBagConstraints1);
        
    }//GEN-END:initComponents

  private void QualifiersMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QualifiersMouseExited
// Add your handling code here:
      System.out.println("Update");
            updateData();
  }//GEN-LAST:event_QualifiersMouseExited

  private void isPublicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_isPublicItemStateChanged
// Add your handling code here:
            updateData();
  }//GEN-LAST:event_isPublicItemStateChanged

  private void qualifierItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_qualifierItemStateChanged
// Add your handling code here:
            updateData();
  }//GEN-LAST:event_qualifierItemStateChanged

  private void isPublicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isPublicActionPerformed
// Add your handling code here:
            updateData();
  }//GEN-LAST:event_isPublicActionPerformed

  private void isPublicStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_isPublicStateChanged
// Add your handling code here:
            updateData();
  }//GEN-LAST:event_isPublicStateChanged

  private void typeListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeListItemStateChanged
// Add your handling code here:
      updateData();
      otherType.setText(memberObject.MemberType);
  }//GEN-LAST:event_typeListItemStateChanged

  private void typeListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeListMouseClicked
// Add your handling code here:
      updateData();
  }//GEN-LAST:event_typeListMouseClicked

  private void typeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeListActionPerformed
// Add your handling code here:
      updateData();
      
      
  }//GEN-LAST:event_typeListActionPerformed

  private void memberNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_memberNameKeyPressed
// Add your handling code here:
      updateData();
  }//GEN-LAST:event_memberNameKeyPressed

  private void otherTypeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_otherTypeKeyPressed
// Add your handling code here:
      updateData();
  }//GEN-LAST:event_otherTypeKeyPressed

  public void updateData() {
      if(enableUpdate) {
      memberObject.MemberName = memberName.getText();
      String selected = (String) typeList.getSelectedItem();
      if(selected.equals("Other")) {
        memberObject.MemberType = otherType.getText();
        memberObject.SimpleObject = false;
      } else if(selected.equals("String")) {
        memberObject.MemberType = selected;
        memberObject.SimpleObject = false;
      } else {
        memberObject.MemberType = selected;
        memberObject.SimpleObject = true;
      }
      memberObject.PublicMember = isPublic.isSelected();
      memberObject.Qualifier = (String) qualifier.getSelectedItem();
      memberObject.descriptionText = description.getText();
      memberObject.isVisible = isVisible.isSelected();
      System.out.println("  updateData(): Object.MemberName = '" + memberObject.MemberName + "'");
      }
  }
  public void setData() {
      memberName.setText(memberObject.MemberName);
      isPublic.setSelected(memberObject.PublicMember);
      qualifier.setSelectedItem(memberObject.Qualifier);
      if(memberObject.MemberType.equals("")) {
          typeList.setSelectedItem(memberObject.MemberType);
      } else if(memberObject.MemberType.equals("int")) {
          typeList.setSelectedItem(memberObject.MemberType);
      } else if(memberObject.MemberType.equals("unsigned int")) {
          typeList.setSelectedItem(memberObject.MemberType);
      } else if(memberObject.MemberType.equals("double")) {
          typeList.setSelectedItem(memberObject.MemberType);
      } else if(memberObject.MemberType.equals("bool")) {
          typeList.setSelectedItem(memberObject.MemberType);
      } else if(memberObject.MemberType.equals("String")) {
          typeList.setSelectedItem(memberObject.MemberType);
      } else {
          typeList.setSelectedItem("Other");
      }
      otherType.setText(memberObject.MemberType);
      isVisible.setSelected(memberObject.isVisible);
      description.setText(memberObject.descriptionText);
      System.out.println("  setData(): Object.MemberName = '" + memberObject.MemberName + "'");
      enableUpdate = true;
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel namePanel;
  private javax.swing.JTextField memberName;
  private javax.swing.JPanel classPanel;
  private javax.swing.JComboBox typeList;
  private javax.swing.JTextField otherType;
  private javax.swing.JPanel Qualifiers;
  private javax.swing.JCheckBox isPublic;
  private javax.swing.JComboBox qualifier;
  private javax.swing.JCheckBox isVisible;
  private javax.swing.JPanel descriptionPanel;
  private javax.swing.JTextField description;
  // End of variables declaration//GEN-END:variables

}
