/*
 * SetUpClassAttrFile.java
 *
 * Created on February 16, 2001, 3:39 PM
 */

package blurock.utilities;
import blurock.core.ReadFile;
import react.common.TopReactionMenu;

import java.io.*;

/**
 * The class sets up an class (rootClass.inp) and attribute (root.inp)
 * pair to be read in.
 * @author reaction
 */
public class SetUpClassAttrFile extends javax.swing.JPanel {

    /**
     * The Top REACT info class
     */
    TopReactionMenu Top;
    /**
     * The class file name
     */
    protected String classFileS;
    protected String classFileRootS;
    /**
     * The attribute file name
     */
    protected String attributeFileS;
    protected String attributeFileRootS;

    /**
     * The 'ReadFile' class to read in both the class and the attribute
     * classes
     */
    ReadFile readFile;
    /**
     * The class file information is collected here
     */
    ClassFile classFile;
    /**
     * The attribtute file information is collected here
     */
    AttributeFile attributeFile;

    protected String fileRootS = null;
    protected String fileDescriptionS = null;
    protected String dirRoot = "./";
    
/**
     * Creates new form SetUpClassAttrFile
     * @param top The REACT info
     * @param rootName The root name of the files.
     * @param description A text description of the class and attribute pair
     */
    public SetUpClassAttrFile(TopReactionMenu top, String rootName, String description) {
        Top = top;
        fileRootS = rootName;
        fileDescriptionS = description;
        initComponents ();
        setup();
    }
    public SetUpClassAttrFile(TopReactionMenu top, String dir, String rootName, String description) {
        Top = top;
        fileRootS = rootName;
        fileDescriptionS = description;
        dirRoot = dir;
        initComponents ();
        setup();
    }
    public void setFields() {
        baseNameField.setText(fileRootS);
        descriptionField.setText(fileDescriptionS);
    }
    public void setup() {
        setFields();
        // Set up local files (relative to dirRoot)
	classFileS = getClassFileName(true);
	attributeFileS = getAttributeFileName(true);
        System.out.println("SetUpClassAttrFile Class file: '" + classFileS + "'");
        System.out.println("SetUpClassAttrFile Class file: '" + attributeFileS + "'");
	try {
	    classFile = new ClassFile(classFileS,descriptionField.getText());
	    attributeFile = new AttributeFile(attributeFileS,descriptionField.getText());
	} catch(FileNotFoundException ioe) { 
	    System.out.println("Attribute and Class Files could not be created: " + classFileS + ", " + attributeFileS);
	}
    }
    public String getAttributeFileName(boolean local) {
        String base = baseNameField.getText();
        if(local) {
            File fileRootF = new File(dirRoot,base);
            base = fileRootF.toString();
        }
        String attrS = new String(base + ".inp");
        return attrS;
    }
    public String getClassFileName(boolean local) {
         String base = baseNameField.getText();
        if(local) {
            File fileRootF = new File(dirRoot,base);
            base = fileRootF.toString();
        }
        String classS = new String(base + "Class.inp");
        return classS;       
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        baseNameLabel = new javax.swing.JLabel();
        baseNameField = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        descriptionField = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(2, 2));

        baseNameLabel.setText("Base Name");
        jPanel1.add(baseNameLabel);

        baseNameField.setText("Root");
        jPanel1.add(baseNameField);

        descriptionLabel.setText("Description");
        jPanel1.add(descriptionLabel);

        descriptionField.setText("Description of Attributes and Classes");
        jPanel1.add(descriptionField);

        add(jPanel1, java.awt.BorderLayout.NORTH);

    }
    // </editor-fold>//GEN-END:initComponents

    /**
     * Add a generic type as a string argument.  A new type is
     * set up in the class file.
     * @param baseclass The class type of the object
     * @param newname The name of the object
     * @param description The description of the object
     * @param spec The object attribute as a string
     */
    public void addClassTypeAsString(String baseclass, String newname, String description, String spec)
    {
	classFile.addClassTypeAsString(baseclass,newname,description,spec);
    }
    /**
     * Add an attribute value pair.  The value is given
     * generically as a string
     * @param name The name of the attribute
     * 
     * @param obj The object as a string
     * 
     * @param dataType The datatype name
     */
    public void printObjectAsString(String name,String obj, String dataType)
    {
	classFile.printAttributeClassPair(name,dataType);
	attributeFile.printObjectAsString(name,obj,dataType);
    }
    /**
     * Add a set of keywords to the value attribute pair
     * @param name The name of the attribute
     * 
     * @param names The set of keywords
     */
    public void printKeyWords(String name, String[] names)
    {
	attributeFile.printKeyWords(name,names);
	classFile.printAttributeClassPair(name,"KeyWords");
    }

    /**
     * Add a KeySet to the attribute value pair.
     * @param name The name of the attribute
     * @param names The set of keys
     */
    public void printKeySet(String name, String[] names)
    {
	attributeFile.printKeyWords(name,names);
	classFile.printAttributeClassPair(name,"KeySet");
    }
    
    /**
     * Add an integer to the attribute value pairs
     * @param name The name of the attribute
     * 
     * @param number The integer value
     */
    public void printInteger(String name, int number)
    {
	attributeFile.printInteger(name,number);
	classFile.printAttributeClassPair(name,"Integer");
    }
    /**
     * Add a Real value to the attribute value pair
     * @param name The name of the attribute
     * @param number The real value as a double
     */
    public void printReal(String name, double number)
    {
	attributeFile.printReal(name,number);
	classFile.printAttributeClassPair(name,"Real");
    }
    /**
     * Add a string as an attribute value pair
     * @param name The name of the attribute
     * 
     * @param str The string value
     */
    public void printString(String name, String str)
    {
	attributeFile.printString(name,str);
	classFile.printAttributeClassPair(name,"String");
    }

    /**
     * This closes the set of class and attribute pairs and reads in the
     * pair of files.  Not more pairs can be added
     * after this is called.
     * @param op not used
     */
    public void read(boolean op)
    {
	endFile();
	readFile = new ReadFile(Top,classFileS,attributeFileS,op);	
    }
    /**
     * Get the output due to the read.
     * @return The output of reading in the files.
     */
    String getReadOutput()
    {
	return readFile.commandOutput;
    }
    /**
     * Closes the set of attribute value pairs.  Not more pairs can be added
     * after this is called
     */
    public void endFile()
    {
	classFile.endFile();
	attributeFile.endFile();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField baseNameField;
    private javax.swing.JLabel baseNameLabel;
    public javax.swing.JTextField descriptionField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

}
