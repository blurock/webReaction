/*
 * CreateMatrixOfReals.java
 *
 * Created on June 1, 2006, 4:42 PM
 */

package blurock.runignition;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.JCheckBox;
import java.io.PrintWriter;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import utilities.FileToString;
import java.util.StringTokenizer;
import utilities.ErrorFrame;
import javax.swing.JFrame;
import utilities.WaitForAnswer;
import blurock.coreobjects.BaseDataSetOfObjects;
import blurock.coreobjects.BaseDataReal;

/**
 * This JPanel class manipulates a matrix of values.
 * Each column of the matrix has a paramter name and each row of the matrix has a set name.
 * @author reaction
 */
public class CreateMatrixOfReals extends javax.swing.JPanel {
    /**
     * This is the matrix of data including the set name.
     * Each row comprises the name of the set followed by the set of parameter values.
     * Element 0: (String) Name of the set
     * Elements 1-n: (Double) The values of the parameters
     */
    public Object[][] MatrixData;
    /**
     * This is a array of String names of each parameter
     */
    public String[] ParameterTitles;
    /**
     * This is the current directory for reading and writing the matrix values
     */
    public String currentDir = ".";
    public String parameterName = "Parameter";
    public String possibleParameters[] = null;
    
    private String addButtonText;
    private String deleteButtonText;
    /** Creates new form CreateMatrixOfReals */
    public CreateMatrixOfReals() {
        updateButtonText();
        initComponents();
        String[] titles = {new String("Selected"), new String("Set")};
        Object[][] initialdata = {{new Boolean(true), new String("Set1")}};
        setTableModel(initialdata, titles);
     }
    public CreateMatrixOfReals(String parname, String[] possible) {
        parameterName = parname;
        possibleParameters = possible;
        updateButtonText();
        initComponents();
        String[] titles = {new String("Selected"), new String("Set")};
        Object[][] initialdata = {{new Boolean(true), new String("Set0")}};
        setTableModel(initialdata, titles);
     }
    private void updateButtonText() {
        addButtonText = new String("Add " + parameterName);
        deleteButtonText = new String("Remove " + parameterName);
    }
    public void setTableModel(BaseDataSetOfObjects mat) {
        Object[] set = mat.setAsArray();
        int nsets = set.length;
        BaseDataSetOfObjects f = (BaseDataSetOfObjects) set[0];
        Object[] fobjs = f.setAsArray();
        
        String[] names = new String[fobjs.length+2];
        names[0] = "Selected";
        names[1] = "Set";
        for(int i=0;i<fobjs.length;i++) {
            BaseDataReal r = (BaseDataReal) fobjs[i];
            names[i+2] = r.Name;
        }
        int nparams = fobjs.length;
        Object[][] dmat = new Object[nsets][nparams+2];
        for(int i=0; i< nsets;i++){
            BaseDataSetOfObjects next = (BaseDataSetOfObjects) set[i];
            Object[] nextobjs = next.setAsArray();
            dmat[i][0] = (Object) new Boolean(true);
            dmat[i][1] = (Object) next.Name;
            for(int j=2;j<nparams+2;j++) {
                BaseDataReal r = (BaseDataReal) nextobjs[j-2];
                dmat[i][j] = (Object) new Double(r.realValue);
            }
        }
        setTableModel(dmat, names);
    }
    private void setTableModel(Object[][] data,String[] titles) {
       DefaultTableModel model = new DefaultTableModel(data,titles) {
            public Class getColumnClass(int columnIndex) {
                if(columnIndex == 0) 
                    return Boolean.class;
                else if(columnIndex == 1) 
                    return String.class;
                else
                    return Double.class;
            }
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return true;
            }
        };
        MatrixTable.setModel(model);
        MatrixData = data;
        ParameterTitles = titles;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        topPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        addParameterButton = new javax.swing.JButton();
        parameterField = new javax.swing.JTextField();
        deleteParameterButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        addRowButton = new javax.swing.JButton();
        setNameField = new javax.swing.JTextField();
        deleteRowButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        MatrixTable = new javax.swing.JTable();
        ioPanel = new javax.swing.JPanel();
        saveMatrixButton = new javax.swing.JButton();
        readMatrixButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        topPanel.setLayout(new java.awt.GridLayout(2, 2));

        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        addParameterButton.setText(addButtonText);
        addParameterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addParameterButtonMouseClicked(evt);
            }
        });

        jPanel1.add(addParameterButton);

        parameterField.setText("P0");
        parameterField.setToolTipText("The name of the parameter to add (if button pressed)");
        parameterField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                parameterFieldMouseClicked(evt);
            }
        });

        jPanel1.add(parameterField);

        deleteParameterButton.setText(deleteButtonText);
        deleteParameterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteParameterButtonMouseClicked(evt);
            }
        });

        jPanel1.add(deleteParameterButton);

        topPanel.add(jPanel1);

        jPanel2.setLayout(new java.awt.GridLayout(1, 3));

        addRowButton.setText("Add New Set");
        addRowButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addRowButtonMouseClicked(evt);
            }
        });

        jPanel2.add(addRowButton);

        setNameField.setText("Set0");
        setNameField.setToolTipText("Set name to insert");
        jPanel2.add(setNameField);

        deleteRowButton.setText("Delete Unseleted Set");
        deleteRowButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteRowButtonMouseClicked(evt);
            }
        });

        jPanel2.add(deleteRowButton);

        topPanel.add(jPanel2);

        add(topPanel, java.awt.BorderLayout.NORTH);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(200, 50));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(453, 250));
        MatrixTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Set1", null, null}
            },
            new String [] {
                "Set Name", "P1", "Title 3"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MatrixTable.setMinimumSize(new java.awt.Dimension(200, 50));
        jScrollPane1.setViewportView(MatrixTable);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        ioPanel.setLayout(new java.awt.GridLayout(1, 2));

        saveMatrixButton.setText("Save Sets");
        saveMatrixButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveMatrixButtonMouseClicked(evt);
            }
        });

        ioPanel.add(saveMatrixButton);

        readMatrixButton.setText("Read In Sets");
        readMatrixButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                readMatrixButtonMouseClicked(evt);
            }
        });

        ioPanel.add(readMatrixButton);

        add(ioPanel, java.awt.BorderLayout.SOUTH);

    }
    // </editor-fold>//GEN-END:initComponents

    private void parameterFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_parameterFieldMouseClicked
        System.out.println("Mouse Click");
        ChooseParameterPanel jlist = new ChooseParameterPanel(possibleParameters);
        WaitForAnswer pick = new WaitForAnswer(jlist);
        pick.setVisible(true);
        if(jlist.currentValue != null) {
            parameterField.setText(jlist.currentValue);
        }
    }//GEN-LAST:event_parameterFieldMouseClicked

    private void readMatrixButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_readMatrixButtonMouseClicked
        FileToString str = new FileToString("Input File",currentDir,"csv");
        StringTokenizer tok = new StringTokenizer(str.outputString,"\n");
        String title = tok.nextToken();
        try {
        if(title.startsWith("MatrixSave")) {
            StringTokenizer tittok = new StringTokenizer(title,",");
            System.out.println(title);
            String t = tittok.nextToken();
            System.out.println(t);
            String numrowsS = tittok.nextToken();
            String numcolumnsS = tittok.nextToken();
            int numrows = Integer.parseInt(numrowsS.trim());
            int numcolumns = Integer.parseInt(numcolumnsS.trim());
            String parameternamesS = tok.nextToken();
            StringTokenizer nametok = new StringTokenizer(parameternamesS,",");
            String[] names = new String[numcolumns];
            names[0] = new String("Selected");
            for(int j=1;j<numcolumns;j++) {
                names[j] = nametok.nextToken();
            }
             Object[][] data = new Object[numrows][numcolumns];
            for(int i=0;i<numrows;i++){
                 String rowS = tok.nextToken();
                 StringTokenizer rowtok = new StringTokenizer(rowS,",");
                data[i][0] = new Boolean(true);
                data[i][1] = rowtok.nextToken();
                for(int j=2;j<numcolumns;j++) {
                    String valueS = rowtok.nextToken().trim();
                    data[i][j] =  new Double(valueS);
                } 
            }
            setTableModel(data,names);
        }
        } catch(NumberFormatException ex) {
            ErrorFrame fr = new ErrorFrame(ex.toString());
            fr.setVisible(true);
        }
        
    }//GEN-LAST:event_readMatrixButtonMouseClicked

    private void saveMatrixButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveMatrixButtonMouseClicked
        try {
        utilities.FileFrame file = new utilities.FileFrame("Output File",currentDir,"csv");
        currentDir = file.defaultDirectory;
        boolean ok =file.getFile();
        if(ok) {
            StringBuffer buf = new StringBuffer();
            DefaultTableModel model = (DefaultTableModel) MatrixTable.getModel();
            int numrows = model.getRowCount();
            int numcolumns = model.getColumnCount();
            buf.append("MatrixSave,");
            buf.append(numrows);
            buf.append(",");
            buf.append(numcolumns);
            buf.append(",\n");
            for(int j=1;j<numcolumns;j++) {
                if(j!=1)
                    buf.append(",");
                String name = (String) model.getColumnName(j);
                buf.append(name);
                
            }
            buf.append(",\n");
            Vector rows = model.getDataVector();
            for(int i=0;i<numrows;i++){
                Vector row = (Vector) rows.elementAt(i);
                String setname = (String) row.elementAt(1);
                buf.append(setname + ",");
                for(int j=2;j<numcolumns;j++) {
                    if(j!=2)
                        buf.append(",");
                    Double value = (Double) row.elementAt(j);
                    buf.append(value.doubleValue());
                }
                buf.append(",\n");
            }
            PrintWriter prt = new PrintWriter(new FileOutputStream(file.chosenFile));
            prt.println(buf.toString());
            prt.close();
        }
          } catch(FileNotFoundException io) {}
    }//GEN-LAST:event_saveMatrixButtonMouseClicked

    private void deleteParameterButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteParameterButtonMouseClicked
        DefaultTableModel model = (DefaultTableModel) MatrixTable.getModel();
        int numrows = model.getRowCount();
        int numcolumns = model.getColumnCount();
        Vector rows = model.getDataVector();
        int found = 0;
        for(int i=0;i<numcolumns;i++) {
            if(model.getColumnName(i).compareTo(parameterField.getText()) == 0)
                found++;
        }
        if(found > 0) {
            Object[][] newdata = new Object[numrows][numcolumns-found];
            String[] newtitles = new String[numcolumns-found];
            for(int i=0;i<numrows;i++){
                Vector row = (Vector) rows.elementAt(i);
                int c = 0;
                for(int j=0;j<numcolumns;j++) {  
                    if(model.getColumnName(j).compareTo(parameterField.getText()) != 0) {
                        newdata[i][c] = row.elementAt(j);
                        c++;
                    }   
                }
            }
            int c=0;
            for(int j=0;j<numcolumns;j++) {
                if(model.getColumnName(j).compareTo(parameterField.getText()) != 0) {
                    newtitles[c] = model.getColumnName(j);
                    c++;
                }
            }
            setTableModel(newdata,newtitles);
        }
    }//GEN-LAST:event_deleteParameterButtonMouseClicked

    private void addRowButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addRowButtonMouseClicked
        DefaultTableModel model = (DefaultTableModel) MatrixTable.getModel();
        int numrows = model.getRowCount();
        int numcolumns = model.getColumnCount();
        Object[][] newdata = new Object[numrows+1][numcolumns];
        String[] newtitles = new String[numcolumns];
        copyTable(newdata, newtitles);
        newdata[numrows][0] = new Boolean(true);
        newdata[numrows][1] = new String(setNameField.getText());
        for(int i=2;i<numcolumns;i++) {
            newdata[numrows][i] = new Double(0.0);
        }
        setTableModel(newdata, newtitles);
    }//GEN-LAST:event_addRowButtonMouseClicked

    private void deleteRowButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteRowButtonMouseClicked
        DefaultTableModel model = (DefaultTableModel) MatrixTable.getModel();
        int numrows = model.getRowCount();
        for(int i=numrows-1;i>=0;i--){
            Boolean sel = (Boolean) model.getValueAt(i, 0);
            if(!sel.booleanValue()) {
                model.removeRow(i);
            }

        }
    }//GEN-LAST:event_deleteRowButtonMouseClicked
    private void copyTable(Object[][] newdata, String[] newtitles) {
        DefaultTableModel model = (DefaultTableModel) MatrixTable.getModel();
        int numrows = model.getRowCount();
        int numcolumns = model.getColumnCount();
        Vector rows = model.getDataVector();
        for(int i=0;i<numrows;i++){
            Vector row = (Vector) rows.elementAt(i);
            for(int j=0;j<numcolumns;j++) {
                newdata[i][j] = row.elementAt(j);
            }
        }
        for(int j=0;j<numcolumns;j++) {
            newtitles[j] = model.getColumnName(j);
        }
     }
    private void addParameterButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addParameterButtonMouseClicked
        DefaultTableModel model = (DefaultTableModel) MatrixTable.getModel();
        int numrows = model.getRowCount();
        int numcolumns = model.getColumnCount();
        Object[][] newdata = new Object[numrows][numcolumns+1];
        String[] newtitles = new String[numcolumns+1];
        copyTable(newdata,newtitles);
        for(int i=0;i<numrows;i++){
            Double ele = new Double(0.0);
            newdata[i][numcolumns] = ele;
        }
        newtitles[numcolumns] = new String(parameterField.getText());
        setTableModel(newdata,newtitles);
    }//GEN-LAST:event_addParameterButtonMouseClicked
    /**
     * This returns just the numeric values of the matrix as Double[][]
     * @return The matrix values as Double[][]
     */
    public Double[][] getMatrix() {
        DefaultTableModel model = (DefaultTableModel) MatrixTable.getModel();
        int numrows = model.getRowCount();
        int numcolumns = model.getColumnCount();
        Double[][] mat = new Double[numrows][numcolumns];
        for(int i=0;i<numrows;i++){
            for(int j=2;j<numcolumns;j++){
                mat[i][j-2] = (Double) model.getValueAt(i,j);
            }
        }
        return mat;
    }
    /**
     * This returns the matrix of values as double values
     * @return The matrix double[][] of values
     */
    public double[][] getMatrixValues() {
        DefaultTableModel model = (DefaultTableModel) MatrixTable.getModel();
        int numrows = model.getRowCount();
        int numcolumns = model.getColumnCount();
        double[][] mat = new double[numrows][numcolumns];
        for(int i=0;i<numrows;i++){
            for(int j=2;j<numcolumns;j++){
                Double value = (Double) model.getValueAt(i,j);
                mat[i][j-2] = value.doubleValue();
           }
        }
        return mat;
       
    }
    /**
     * The set of parameter names
     * @return The array of String names for the parameter values
     */
    public String[] getParameterNames() {
        DefaultTableModel model = (DefaultTableModel) MatrixTable.getModel();
        int numcolumns = model.getColumnCount();
        String[] names = new String[numcolumns-2];
        for(int i=2;i<numcolumns;i++) {
            names[i-2] = ParameterTitles[i];
        }
        return names;
    }
    public String[] getSetNames() {
        DefaultTableModel model = (DefaultTableModel) MatrixTable.getModel();
        int numrows = model.getRowCount();
        String[] names = new String[numrows];
        for(int i=0;i<numrows;i++){
            names[i] = (String) model.getValueAt(i, 1);
        }
        return names;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MatrixTable;
    private javax.swing.JButton addParameterButton;
    private javax.swing.JButton addRowButton;
    private javax.swing.JButton deleteParameterButton;
    private javax.swing.JButton deleteRowButton;
    private javax.swing.JPanel ioPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField parameterField;
    private javax.swing.JButton readMatrixButton;
    private javax.swing.JButton saveMatrixButton;
    private javax.swing.JTextField setNameField;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
    
};

