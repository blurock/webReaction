/*
 * CreateVectorOfReals.java
 *
 * Created on June 8, 2006, 11:15 AM
 */

package blurock.runignition;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.JCheckBox;
import java.io.PrintWriter;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import utilities.FileToString;
import java.util.StringTokenizer;
import utilities.ErrorFrame;
import javax.swing.JFrame;
import utilities.WaitForAnswer;
import blurock.coreobjects.BaseDataSetOfObjects;
import blurock.coreobjects.BaseDataReal;

/**
 *
 * @author  reaction
 */
public class CreateVectorOfReals extends javax.swing.JPanel {
    String addButtonText = "Add Parameter";
    String removeButtonText = "Remove Parameter";
    String defaultFieldText = "P";
    String parameterNameCell = "Parameter";
    
    Object[] VectorData;
    String[] ParameterTitles;
    
    /** Creates new form CreateVectorOfReals */
    public CreateVectorOfReals() {
        initComponents();
        Object[][] vec =  {{parameterNameCell}};
        String[] titles = {"Name"};
        setTableModel(vec, titles);
    }
    public CreateVectorOfReals(String name) {
        initComponents();
        parameterNameCell = name;
        addButtonText = new String("Add " + name);
        removeButtonText = new String("Remove " + name);
        Object[][] vec =  {{parameterNameCell}};
        String[] titles = {"Name"};
        setTableModel(vec, titles);
    }
     private void setTableModel(Object[][] data,String[] titles) {
       DefaultTableModel model = new DefaultTableModel(data,titles) {
            public Class getColumnClass(int columnIndex) {
                if(columnIndex == 0) 
                    return String.class;
                else   
                    return Double.class;
            }
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if(columnIndex == 0)
                    return false;
                else
                    return true;
            }
        };
        vectorTable.setModel(model);
        VectorData = data[0];
        ParameterTitles = titles;
    }
    public void setTableModel(BaseDataSetOfObjects mat) {
        Object[] set = mat.setAsArray();
        int nparams = set.length;
        String[] names = new String[nparams+1];
        names[0] = "Name";
       for(int i=0;i<set.length;i++) {
            BaseDataReal r = (BaseDataReal) set[i];
            names[i+1] = r.Name;
        }
        Object[][] dmat = new Object[1][nparams+1];
        dmat[0][1] = (Object) mat.Name;
        for(int j=1;j<nparams+1;j++) {
             BaseDataReal r = (BaseDataReal) set[j-1];
             dmat[0][j] = (Object) new Double(r.realValue);
            }
        setTableModel(dmat, names);
    }
   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        topPanel = new javax.swing.JPanel();
        addParameter = new javax.swing.JButton();
        parameterField = new javax.swing.JTextField();
        removeButoon = new javax.swing.JButton();
        vectorPanel = new javax.swing.JPanel();
        matrixScroll = new javax.swing.JScrollPane();
        vectorTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        setMaximumSize(new java.awt.Dimension(600, 150));
        setMinimumSize(new java.awt.Dimension(354, 25));
        setPreferredSize(new java.awt.Dimension(453, 100));
        topPanel.setLayout(new java.awt.GridLayout(1, 3));

        addParameter.setText(addButtonText);
        addParameter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addParameterMouseClicked(evt);
            }
        });

        topPanel.add(addParameter);

        parameterField.setText(defaultFieldText);
        topPanel.add(parameterField);

        removeButoon.setText(removeButtonText);
        removeButoon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeButoonMouseClicked(evt);
            }
        });

        topPanel.add(removeButoon);

        add(topPanel, java.awt.BorderLayout.NORTH);

        vectorPanel.setLayout(new java.awt.BorderLayout());

        vectorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        matrixScroll.setViewportView(vectorTable);

        vectorPanel.add(matrixScroll, java.awt.BorderLayout.CENTER);

        add(vectorPanel, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents

    private void removeButoonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeButoonMouseClicked
        DefaultTableModel model = (DefaultTableModel) vectorTable.getModel();
        int numcolumns = model.getColumnCount();
        Vector rows = model.getDataVector();
        int found = 0;
        for(int i=0;i<numcolumns;i++) {
            if(model.getColumnName(i).compareTo(parameterField.getText()) == 0)
                found++;
        }
        if(found > 0) {
            Object[][] newdata = new Object[1][numcolumns-found];
            String[] newtitles = new String[numcolumns-found];
            Vector row = (Vector) rows.elementAt(0);
            int c = 0;
            for(int j=0;j<numcolumns;j++) {  
                if(model.getColumnName(j).compareTo(parameterField.getText()) != 0) {
                    newdata[0][c] = row.elementAt(j);
                    c++;
                }
            }
            c=0;
            for(int j=0;j<numcolumns;j++) {
                if(model.getColumnName(j).compareTo(parameterField.getText()) != 0) {
                    newtitles[c] = model.getColumnName(j);
                    c++;
                }
            }
        setTableModel(newdata,newtitles);
        }
    }//GEN-LAST:event_removeButoonMouseClicked
   private void copyTable(Object[][] newdata, String[] newtitles) {
        DefaultTableModel model = (DefaultTableModel) vectorTable.getModel();
        int numcolumns = model.getColumnCount();
        Vector rows = model.getDataVector();
        Vector row = (Vector) rows.elementAt(0);
        for(int j=0;j<numcolumns;j++) {
             newdata[0][j] = row.elementAt(j);
        }
        for(int j=0;j<numcolumns;j++) {
            newtitles[j] = model.getColumnName(j);
        }
     }
    private void addParameterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addParameterMouseClicked
       DefaultTableModel model = (DefaultTableModel) vectorTable.getModel();
        int numcolumns = model.getColumnCount();
        Object[][] newdata = new Object[1][numcolumns+1];
        String[] newtitles = new String[numcolumns+1];
        copyTable(newdata,newtitles);
        Double ele = new Double(0.0);
        newdata[0][numcolumns] = ele;
        newtitles[numcolumns] = new String(parameterField.getText());
        setTableModel(newdata,newtitles);
    }//GEN-LAST:event_addParameterMouseClicked
     /**
     * This returns the matrix of values as double values
     * @return The matrix double[][] of values
     */
    public double[] getVectorValues() {
        DefaultTableModel model = (DefaultTableModel) vectorTable.getModel();
        int numcolumns = model.getColumnCount();
        double[] vec = new double[numcolumns-1];
            for(int j=1;j<numcolumns;j++){
                Double value = (Double) model.getValueAt(0,j);
                vec[j-1] = value.doubleValue();
           }
        return vec;
    }
    /**
     * The set of parameter names
     * @return The array of String names for the parameter values
     */
    public String[] getParameterNames() {
        DefaultTableModel model = (DefaultTableModel) vectorTable.getModel();
        int numcolumns = model.getColumnCount();
        String[] names = new String[numcolumns-1];
        for(int i=1;i<numcolumns;i++) {
            names[i-1] = ParameterTitles[i];
        }
        return names;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addParameter;
    private javax.swing.JScrollPane matrixScroll;
    private javax.swing.JTextField parameterField;
    private javax.swing.JButton removeButoon;
    private javax.swing.JPanel topPanel;
    private javax.swing.JPanel vectorPanel;
    private javax.swing.JTable vectorTable;
    // End of variables declaration//GEN-END:variables
    
}
