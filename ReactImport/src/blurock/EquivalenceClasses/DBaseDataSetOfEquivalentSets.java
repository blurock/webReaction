/*
 * DBaseDataSetOfEquivalentSets.java
 *
 * Created on June 6, 2005, 6:14 PM
 */

package blurock.EquivalenceClasses;
import blurock.core.ObjectAsTreeNode;
import blurock.core.ObjectDisplayManager;
import blurock.coreobjects.BaseDataObject;
import blurock.coreobjects.DataObjectClass;
import blurock.coreobjects.DBaseDataObject;
import blurock.coreobjects.DBaseDataSetOfObjects;
import blurock.coreobjects.DataSetOfObjectsClass;
import blurock.coreobjects.BaseDataSetOfObjects;
import javax.swing.JPanel;
import blurock.core.ObjectNotFoundException;
import utilities.ErrorFrame;

/**
 *
 * @author  reaction
 */
public class DBaseDataSetOfEquivalentSets  extends DBaseDataSetOfObjects {
    
    /** Creates new form DBaseDataSetOfEquivalentSets */
    public DBaseDataSetOfEquivalentSets(ObjectDisplayManager man,BaseDataObject obj,DataObjectClass cls) {
        super(man,obj,cls);
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        
        setLayout(new java.awt.BorderLayout());
        
    }//GEN-END:initComponents
    public ObjectAsTreeNode objectAsSubTree(ObjectAsTreeNode topnode) {
        ObjectAsTreeNode name = new ObjectAsTreeNode(this);
        topnode.add(name);
        try {
            BaseDataSetOfObjects setofobjects = (BaseDataSetOfObjects) Object;
            ObjectDisplayManager man = this.displayManager;
            DataSetOfObjectsClass classes = man.dataClasses;
            Object[] set = setofobjects.setAsArray();
            
            for(int i=0;i<set.length;i++) {
                BaseDataEquivalentSet equivset = (BaseDataEquivalentSet) set[i];
                DataObjectClass equivclass = classes.findClass(equivset.Type);
                DBaseDataEquivalenceSet dequiv = (DBaseDataEquivalenceSet) equivset.getDisplayObject(man,equivclass);
                ObjectAsTreeNode equivnode = dequiv.objectAsSubTree(name);
            }
        } catch(ObjectNotFoundException ex) {
            ErrorFrame fr = new ErrorFrame("Error in displaying SetOfEquivalentSets");
        }

        return name;
    }
    public JPanel objectAsPanel() {
        BaseDataSetOfObjects setofobjects = (BaseDataSetOfObjects) Object;
        JPanel panel = new JPanel();
        panel.setLayout(new java.awt.FlowLayout());
        try {
            ObjectDisplayManager man = this.displayManager;
            DataSetOfObjectsClass classes = man.dataClasses;
            Object[] set = setofobjects.setAsArray();
            for(int i=0;i<set.length;i++) {
                BaseDataEquivalentSet equivset = (BaseDataEquivalentSet) set[i];
                DataObjectClass equivclass = classes.findClass(equivset.Type);
                DBaseDataEquivalenceSet dequiv = (DBaseDataEquivalenceSet) equivset.getDisplayObject(man,equivclass);
                JPanel pan = dequiv.objectAsPanel();
                panel.add(pan);
            }
        } catch(ObjectNotFoundException ex) {
            ErrorFrame fr = new ErrorFrame("Error in displaying SetOfEquivalentSets");
        }
        return panel;
    }
    public String getType() {
        return OClass.Name;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
