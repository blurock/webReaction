/*
 * Hierarchy.java
 *
 * Created on May 8, 2001, 2:48 PM
 */

package blurock.core;
import blurock.coreobjects.*;
import java.util.*;
import javax.swing.*;
import javax.swing.tree.*;
import java.awt.event.*;
import javax.swing.event.*;

/**
 *
 * @author  reaction
 * @version 
 */
public class Hierarchy extends javax.swing.JPanel {
    ObjectAsTreeNode topNode = new ObjectAsTreeNode("Build Structure");
    DefaultTreeModel treeModel;
    Hashtable nodeSet = new Hashtable();
    public ObjectAsTreeNode selectedNode = null;
    public boolean isLeafNode = false;
    public boolean nodeSelected = false;
    
    DataObjectClass nodeNameClass;
    ObjectDisplayManager dispManager;
    
    /** Creates new form Hierarchy */
    public Hierarchy() {
        treeModel = new DefaultTreeModel(topNode);
        treeModel.addTreeModelListener(new MyTreeModelListener());
        initComponents ();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        scrollPanel = new javax.swing.JScrollPane();
        hierarchy = new JTree(treeModel);
        setLayout(new java.awt.BorderLayout());
        
        
        hierarchy.setPreferredSize(new java.awt.Dimension(300, 500));
          hierarchy.addMouseListener(new java.awt.event.MouseAdapter() {
              public void mouseClicked(java.awt.event.MouseEvent evt) {
                  hierarchyMouseClicked(evt);
              }
          }
          );
          scrollPanel.setViewportView(hierarchy);
          
          
        add(scrollPanel, java.awt.BorderLayout.CENTER);
        
    }//GEN-END:initComponents
    public void setup(DataObjectClass cls, ObjectDisplayManager man) {
        nodeNameClass  = cls;
        dispManager = man;
    }
  private void hierarchyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hierarchyMouseClicked
// Add your handling code here:
      nodeSelected = setNode(evt);
      if(nodeSelected) {
         System.out.println("Hierarchy Mouse Clicked: " + selectedNode.toString());
         if(isLeafNode) System.out.println("Leaf Node");
      } else {
          System.out.println("Hierarchy Mouse Clicked: failure");
      }
         
  }//GEN-LAST:event_hierarchyMouseClicked

  public boolean setNode(MouseEvent e) {
        boolean success = true;
       TreePath path = hierarchy.getPathForLocation(e.getX(),e.getY());
       if(path != null) {
            selectedNode = (ObjectAsTreeNode) path.getLastPathComponent();
            nodeSelected = true;
            success = setLeafStatus(e);
       } else {
           success = false;
       }
       return success;
    }
    public boolean setLeafStatus(MouseEvent e) {
        boolean success = true;
       int selRow = hierarchy.getRowForLocation(e.getX(),e.getY());
       if(selRow != -1) {
          isLeafNode = hierarchy.getModel().isLeaf(selectedNode);
       } else {
           success = false;
       }
       return success;
    }
    public void setTopNode(ObjectAsTreeNode top) {
        topNode = top;
        scrollPanel.remove(hierarchy);
        treeModel = new DefaultTreeModel(topNode);
        treeModel.addTreeModelListener(new MyTreeModelListener());
 
        hierarchy = new JTree(treeModel);
        hierarchy.setEditable(true);
        hierarchy.getSelectionModel().setSelectionMode
                 (TreeSelectionModel.SINGLE_TREE_SELECTION);
        hierarchy.setShowsRootHandles(true);

        scrollPanel.setViewportView(hierarchy);
        scrollPanel.updateUI();
        hierarchy.addMouseListener(new java.awt.event.MouseAdapter() {
              public void mouseClicked(java.awt.event.MouseEvent evt) {
                  hierarchyMouseClicked(evt);
              }});
        nodeSet.put((Object) top.toString(), (Object) top);
    }
        
    public void addNodeToSet(ObjectAsTreeNode node, ObjectAsTreeNode parent) {
        nodeSet.put((Object) node.toString(), (Object) node);
        addObject(parent,node,true);
        updateUI();
    }
    
    public void addObject(DefaultMutableTreeNode parent,
                                            DefaultMutableTreeNode childNode,
                                            boolean shouldBeVisible) {
           System.out.println("Adding: '" + childNode + "' to '" + parent + "'");
           System.out.println("Parent Child Count: " + parent.getChildCount());
           treeModel.insertNodeInto(childNode, parent,
                                      parent.getChildCount());

             // Make sure the user can see the lovely new node.
             if (shouldBeVisible) {
                 hierarchy.scrollPathToVisible(new TreePath(childNode.getPath()));
             }
         }
         
    class MyTreeModelListener implements TreeModelListener {
        public void treeNodesChanged(TreeModelEvent e) {
            DefaultMutableTreeNode node;
            node = (DefaultMutableTreeNode)
                     (e.getTreePath().getLastPathComponent());
            /*
             * If the event lists children, then the changed
             * node is the child of the node we've already
             * gotten.  Otherwise, the changed node and the
             * specified node are the same.
             */
            try {
                int index = e.getChildIndices()[0];
                node = (DefaultMutableTreeNode)
                       (node.getChildAt(index));
            } catch (NullPointerException exc) {}

            System.out.println("The user has finished editing the node.");
            System.out.println("New value: " + node.getUserObject());
            String name = (String) node.getUserObject();
            node.setUserObject(name);
        }
        public void treeNodesInserted(TreeModelEvent e) {
        }
        public void treeNodesRemoved(TreeModelEvent e) {
        }
        public void treeStructureChanged(TreeModelEvent e) {
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JTree hierarchy;
    // End of variables declaration//GEN-END:variables

}
