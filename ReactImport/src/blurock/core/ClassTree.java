/*
 * ClassTree.java
 *
 * Created on March 9, 2001, 10:12 AM
 */

package blurock.core;
import react.common.TopReactionMenu;
import blurock.instattr.GetObjectClass;
import java.awt.Dimension;
import java.util.StringTokenizer;
import javax.swing.*;
import javax.swing.tree.*;
import java.io.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Vector;

/**
 *
 * @author  reaction
 * @version 
 */
public class ClassTree extends javax.swing.JPanel {
    TopReactionMenu Top;
    ClassTreeNode[] Nodes;
    ClassTreeBond[] Bonds;
    String[] nodeNames;
    int maxNumberOfNodes = 600;
    int nodeCount;
    int bondCount;
    String[] parentNodes;
    String[] sonNodes;
    ClassTreeNode baseNode;
    String baseNodeName;
    String startString = new String("DIRECTEDGRAPH");
    String endString = new String("END");
    AttributeFrame objectClass;

            public MouseListener ml = new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                int selRow = tree.getRowForLocation(e.getX(),e.getY());
                TreePath path = tree.getPathForLocation(e.getX(),e.getY());
                if(path != null) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) 
                     path.getLastPathComponent();
                    String name = (String) node.getUserObject();
                    if(selRow != -1) {
                        boolean isleaf = tree.getModel().isLeaf(node);
                        if(isleaf) {
                            System.out.println("Is a Leaf Node -->");
                         if(e.getClickCount() == 1) {
                            //if(isleaf)
                                //setSelected(name);
                        } else if(e.getClickCount() == 2) {
                            if(isleaf)
                                setFrame(name);
                        }
                        }
                    }
                }
            }
        };
        public void setFrame(String name) {
            System.out.println("Open Frame: " + name);
            objectClass.inFrame(name);
        }

    public ClassTree(String base, String[] nodes, String[] parents, String[] sons) {
	baseNodeName = base;
	nodeNames = nodes;
	nodeCount = nodes.length;
	parentNodes = parents;
	sonNodes = sons;
	bondCount = parents.length;
	setTree();
        baseNode = findNode(baseNodeName);

        initComponents ();
    }
    /** Creates new form ClassTree */
    public ClassTree(TopReactionMenu top) {
        Top = top;
        baseNode = new ClassTreeNode(null,"Not Initialized");
        initComponents ();
        tree.addMouseListener(ml);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        update = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new JTree(baseNode);
        jPanel4 = new javax.swing.JPanel();
        setLayout(new java.awt.BorderLayout());
        
        
        
          update.setText("Update");
            update.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    updateMouseClicked(evt);
                }
            }
            );
            jPanel2.add(update);
            
            jPanel1.add(jPanel2);
          
          
        add(jPanel1, java.awt.BorderLayout.NORTH);
        
        
        jPanel3.setBorder(new javax.swing.border.TitledBorder("Class Hierarchy"));
        
        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 300));
          
          jScrollPane1.setViewportView(tree);
            
            jPanel3.add(jScrollPane1);
          
          
        add(jPanel3, java.awt.BorderLayout.CENTER);
        
        
        
        add(jPanel4, java.awt.BorderLayout.SOUTH);
        
    }//GEN-END:initComponents

  private void updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateMouseClicked
	System.out.println("ClassTree: Get Tree");
	String outputString = commandClassTree(Top);
	System.out.println("ClassTree: interpret Class Tree");
	setClassTree(outputString);
	System.out.println("ClassTree: Set Class Tree");
	setTree();
        baseNode = findNode(baseNodeName);
        objectClass = new AttributeFrame(Top,new GetObjectClass(Top));
        DefaultTreeModel treemodel = new DefaultTreeModel(baseNode);
        tree.setModel(treemodel);
        updateUI();
  }//GEN-LAST:event_updateMouseClicked
    void setTree() {
	Nodes = new ClassTreeNode[nodeCount];
	Bonds = new ClassTreeBond[bondCount];
	for(int i=0;i<nodeCount;i++) {
	    Nodes[i] = new ClassTreeNode(this,nodeNames[i]);
	}
	for(int b=0;b<bondCount;b++) {
	    Bonds[b] = new ClassTreeBond(this,parentNodes[b],sonNodes[b]);
	}
    }
    public String[] getSubClasses(String superclass) {
        Vector clses = new Vector();
        fillInSubClasses(superclass,clses);
        Object[] objs = clses.toArray();
        String[] names = new String[objs.length];
        for(int i=0;i<objs.length;i++) {
            names[i] = (String) objs[i];
        }
        return names;
    }
    void fillInSubClasses(String superclass, Vector clses) {
        ClassTreeNode baseNode = findNode(superclass);
        for(int i=0;i<Bonds.length;i++) {
            if(parentNodes[i].equals(superclass)) {
                clses.add(sonNodes[i]);
                fillInSubClasses(sonNodes[i],clses);
            }
        }
    }
    void setClassTree(String outputString) {
	String nodes[] = new String[maxNumberOfNodes];
	StringTokenizer outtokens = new StringTokenizer(outputString,"\n");
	boolean found = findBegining(outtokens);
	if(found) {
	    String next = outtokens.nextToken();
	    baseNodeName = outtokens.nextToken();
	    found = findNodes(outtokens);
	    if(found) {
		found = findBonds(outtokens);
	    }
	}
    }
    String commandClassTree(TopReactionMenu top)
    {
        RunCommand runit = new RunCommand(top,"ClassTree",false);
	return runit.commandOutput;
    }
    boolean findBegining(StringTokenizer outtokens)
    {
	System.out.println("findBegining");
	boolean notfound = true;
	while(notfound && outtokens.hasMoreElements())
	    {
		String next = outtokens.nextToken();
		System.out.println("findBegining: '" + next + "'");
		if(next.startsWith(startString))
		    notfound = false;
	    }
	return !notfound;
    }
    boolean findNodes(StringTokenizer outtokens)
    {
	nodeCount = 0;
	nodeNames = new String[maxNumberOfNodes];
	boolean notdone = true;
	while(notdone && outtokens.hasMoreElements())
	    {
		String next = outtokens.nextToken();
		System.out.println("findNodes: '" + next + "'");
		if(next.startsWith(endString))
		    notdone = false;
		else {
		    nodeNames[nodeCount] = next;
		    nodeCount++;
		}
	    }
	return !notdone;
    }
    boolean findBonds(StringTokenizer outtokens)
    {
	parentNodes = new String[nodeCount];
	sonNodes = new String[nodeCount];
	bondCount = 0;
	boolean notdone = true;
	while(notdone && outtokens.hasMoreElements())
	    {
		String next = outtokens.nextToken();
		System.out.println("findBonds: '" + next + "'");
		if(next.startsWith(endString))
		    notdone = false;
		else {
		    int index = next.indexOf(' ');
		    parentNodes[bondCount] = next.substring(0,index);
		    sonNodes[bondCount] = next.substring(index+1);
		    bondCount++;
		}
	    }
	return !notdone;
    }
    
    public ClassTreeNode findNode(String node)
    {
	int found = -1;
	int count = 0;
	//System.out.println("findNode: " + Nodes.length);
	while(found == -1 && count < Nodes.length)
	    {
		//System.out.println("To Find: '" + node + "' try: (" + count + ") '" + Nodes[count].nodeName + "'");
		if(node.startsWith(Nodes[count].nodeName) && node.length() == Nodes[count].nodeName.length())
		    found = count;
		count++;
	    }
	if(found >= 0) { 
	    //System.out.println("Found: '" + Nodes[found].nodeName + "'");
	    return Nodes[found];
	} else {
		System.out.println("Didn't find '" + node + "' in nodes, returning 'Object'");
		return Nodes[0];
	    }
    }
    public void addBond(ClassTreeNode parent, ClassTreeNode son)
    {
	System.out.println("addBond: '" + parent.nodeName + "' '" + son.nodeName + "'");
	parent.add(son);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton update;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree tree;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables

}
