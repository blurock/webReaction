/*
 * CMLFrame.java
 *
 * Created on February 11, 2004, 2:17 AM
 */

package blurock.reaction.GUI;
import blurock.reactions.common.Log;
import blurock.reactions.common.SClient;
import blurock.reactions.common.SColor;
import blurock.reactions.common.suffixFilter;
import java.util.*;
/**
 * 
 *
 * @author  moliate
 */
public class CMLFrame extends javax.swing.JInternalFrame implements java.beans.PropertyChangeListener
{
    
    /** Creates new form CMLFrame */
    public CMLFrame() {
        initComponents();
        toFront();
        textArea.setBackground(SColor.getBackground());
        textArea.setForeground(SColor.getForeground());
        SColor.addPropertyChangeListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        toolBar = new javax.swing.JToolBar();
        clearButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        selectCML = new javax.swing.JComboBox();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setPreferredSize(new java.awt.Dimension(400, 200));
        setTitle("Server responses");
        textArea.setEditable(false);
        scrollPane.setViewportView(textArea);

        getContentPane().add(scrollPane, java.awt.BorderLayout.CENTER);

        clearButton.setText("Clear");
        clearButton.setToolTipText("Clears communication list");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        toolBar.add(clearButton);
        
        saveButton.setText("Save");
        saveButton.setToolTipText("Save data to file");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        toolBar.add(saveButton);

        selectCML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCMLActionPerformed(evt);
            }
        });

        toolBar.add(selectCML);

        getContentPane().add(toolBar, java.awt.BorderLayout.SOUTH);

        pack();
    }

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {
        communications = new java.util.Vector();
        selectCML.removeAllItems();
        textArea.setText(""); 
    }
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try
        {
             javax.swing.JFileChooser chooser = new javax.swing.JFileChooser(SClient.getClientHome());
             chooser.setFileFilter(new suffixFilter(".cml","CML files"));  
             int returnVal = chooser.showDialog(this, "Save cml list");
             if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) 
             {
                   java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileOutputStream(chooser.getSelectedFile()));
                   pw.println(textArea.getText());
                   pw.close();
             }
        } 
        catch(Exception e)
        {
             Log.println("Failed to open file: " + e.toString(), Log.ERROR);
             Log.println(e, Log.INFO);
        }
    }
        
    private void selectCMLActionPerformed(java.awt.event.ActionEvent evt) {
        int index = selectCML.getSelectedIndex();
        if (-1 == index)
            textArea.setText("");
        else
            textArea.setText((String)communications.get(index));
    }
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {
        System.exit(0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new CMLFrame().show();
    }
    
    public void addCML(String comm)
    {
        communications.add(0, comm);
        selectCML.insertItemAt( "Response at " + new Date(), 0 );
        selectCML.setSelectedIndex(0);
        selectCMLActionPerformed(null);
        repaint();
    }
    
    public void propertyChange(java.beans.PropertyChangeEvent evt) 
    {
        textArea.setBackground(SColor.getBackground());
        textArea.setForeground(SColor.getForeground());
        if (this.isVisible())
            repaint();
    }
    
    protected Vector communications = new Vector();
    // Variables declaration - do not modify
    private javax.swing.JButton clearButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JComboBox selectCML;
    private javax.swing.JTextArea textArea;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration
    
}
